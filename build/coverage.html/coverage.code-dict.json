{"/home/travis/build/npmtest/node-npmtest-knockout.validation/test.js":"/* istanbul instrument in package npmtest_knockout_validation */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-knockout.validation/lib.npmtest_knockout.validation.js":"/* istanbul instrument in package npmtest_knockout_validation */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_knockout_validation = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_knockout_validation = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-knockout.validation/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-knockout.validation && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_knockout_validation */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_knockout_validation\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_knockout_validation.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_knockout_validation.rollup.js'] =\n            local.assetsDict['/assets.npmtest_knockout_validation.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_knockout_validation.__dirname + '/lib.npmtest_knockout_validation.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-knockout.validation/node_modules/knockout.validation/dist/knockout.validation.js":"/*=============================================================================\n\tAuthor:\t\t\tEric M. Barnard - @ericmbarnard\t\t\t\t\t\t\t\t\n\tLicense:\t\tMIT (http://opensource.org/licenses/mit-license.php)\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tDescription:\tValidation Library for KnockoutJS\t\t\t\t\t\t\t\n\tVersion:\t\t2.0.3\t\t\t\t\t\t\t\t\t\t\t\n===============================================================================\n*/\n/*globals require: false, exports: false, define: false, ko: false */\n\n(function (factory) {\n\t// Module systems magic dance.\n\n\tif (typeof require === \"function\" && typeof exports === \"object\" && typeof module === \"object\") {\n\t\t// CommonJS or Node: hard-coded dependency on \"knockout\"\n\t\tfactory(require(\"knockout\"), exports);\n\t} else if (typeof define === \"function\" && define[\"amd\"]) {\n\t\t// AMD anonymous module with hard-coded dependency on \"knockout\"\n\t\tdefine([\"knockout\", \"exports\"], factory);\n\t} else {\n\t\t// <script> tag: use the global `ko` object, attaching a `mapping` property\n\t\tfactory(ko, ko.validation = {});\n\t}\n}(function ( ko, exports ) {\n\n\tif (typeof (ko) === 'undefined') {\n\t\tthrow new Error('Knockout is required, please ensure it is loaded before loading this validation plug-in');\n\t}\n\n\t// create our namespace object\n\tko.validation = exports;\n\n\tvar kv = ko.validation,\n\t\tkoUtils = ko.utils,\n\t\tunwrap = koUtils.unwrapObservable,\n\t\tforEach = koUtils.arrayForEach,\n\t\textend = koUtils.extend;\n;/*global ko: false*/\n\nvar defaults = {\n\tregisterExtenders: true,\n\tmessagesOnModified: true,\n\terrorsAsTitle: true,            // enables/disables showing of errors as title attribute of the target element.\n\terrorsAsTitleOnModified: false, // shows the error when hovering the input field (decorateElement must be true)\n\tmessageTemplate: null,\n\tinsertMessages: true,           // automatically inserts validation messages as <span></span>\n\tparseInputAttributes: false,    // parses the HTML5 validation attribute from a form element and adds that to the object\n\twriteInputAttributes: false,    // adds HTML5 input validation attributes to form elements that ko observable's are bound to\n\tdecorateInputElement: false,         // false to keep backward compatibility\n\tdecorateElementOnModified: true,// true to keep backward compatibility\n\terrorClass: null,               // single class for error message and element\n\terrorElementClass: 'validationElement',  // class to decorate error element\n\terrorMessageClass: 'validationMessage',  // class to decorate error message\n\tallowHtmlMessages: false,\t\t// allows HTML in validation messages\n\tgrouping: {\n\t\tdeep: false,        //by default grouping is shallow\n\t\tobservable: true,   //and using observables\n\t\tlive: false\t\t    //react to changes to observableArrays if observable === true\n\t},\n\tvalidate: {\n\t\t// throttle: 10\n\t}\n};\n\n// make a copy  so we can use 'reset' later\nvar configuration = extend({}, defaults);\n\nconfiguration.html5Attributes = ['required', 'pattern', 'min', 'max', 'step'];\nconfiguration.html5InputTypes = ['email', 'number', 'date'];\n\nconfiguration.reset = function () {\n\textend(configuration, defaults);\n};\n\nkv.configuration = configuration;\n;kv.utils = (function () {\n\tvar seedId = new Date().getTime();\n\n\tvar domData = {}; //hash of data objects that we reference from dom elements\n\tvar domDataKey = '__ko_validation__';\n\n\treturn {\n\t\tisArray: function (o) {\n\t\t\treturn o.isArray || Object.prototype.toString.call(o) === '[object Array]';\n\t\t},\n\t\tisObject: function (o) {\n\t\t\treturn o !== null && typeof o === 'object';\n\t\t},\n\t\tisNumber: function(o) {\n\t\t\treturn !isNaN(o);\t\n\t\t},\n\t\tisObservableArray: function(instance) {\n\t\t\treturn !!instance &&\n\t\t\t\t\ttypeof instance[\"remove\"] === \"function\" &&\n\t\t\t\t\ttypeof instance[\"removeAll\"] === \"function\" &&\n\t\t\t\t\ttypeof instance[\"destroy\"] === \"function\" &&\n\t\t\t\t\ttypeof instance[\"destroyAll\"] === \"function\" &&\n\t\t\t\t\ttypeof instance[\"indexOf\"] === \"function\" &&\n\t\t\t\t\ttypeof instance[\"replace\"] === \"function\";\n\t\t},\n\t\tvalues: function (o) {\n\t\t\tvar r = [];\n\t\t\tfor (var i in o) {\n\t\t\t\tif (o.hasOwnProperty(i)) {\n\t\t\t\t\tr.push(o[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn r;\n\t\t},\n\t\tgetValue: function (o) {\n\t\t\treturn (typeof o === 'function' ? o() : o);\n\t\t},\n\t\thasAttribute: function (node, attr) {\n\t\t\treturn node.getAttribute(attr) !== null;\n\t\t},\n\t\tgetAttribute: function (element, attr) {\n\t\t\treturn element.getAttribute(attr);\n\t\t},\n\t\tsetAttribute: function (element, attr, value) {\n\t\t\treturn element.setAttribute(attr, value);\n\t\t},\n\t\tisValidatable: function (o) {\n\t\t\treturn !!(o && o.rules && o.isValid && o.isModified);\n\t\t},\n\t\tinsertAfter: function (node, newNode) {\n\t\t\tnode.parentNode.insertBefore(newNode, node.nextSibling);\n\t\t},\n\t\tnewId: function () {\n\t\t\treturn seedId += 1;\n\t\t},\n\t\tgetConfigOptions: function (element) {\n\t\t\tvar options = kv.utils.contextFor(element);\n\n\t\t\treturn options || kv.configuration;\n\t\t},\n\t\tsetDomData: function (node, data) {\n\t\t\tvar key = node[domDataKey];\n\n\t\t\tif (!key) {\n\t\t\t\tnode[domDataKey] = key = kv.utils.newId();\n\t\t\t}\n\n\t\t\tdomData[key] = data;\n\t\t},\n\t\tgetDomData: function (node) {\n\t\t\tvar key = node[domDataKey];\n\n\t\t\tif (!key) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\treturn domData[key];\n\t\t},\n\t\tcontextFor: function (node) {\n\t\t\tswitch (node.nodeType) {\n\t\t\t\tcase 1:\n\t\t\t\tcase 8:\n\t\t\t\t\tvar context = kv.utils.getDomData(node);\n\t\t\t\t\tif (context) { return context; }\n\t\t\t\t\tif (node.parentNode) { return kv.utils.contextFor(node.parentNode); }\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn undefined;\n\t\t},\n\t\tisEmptyVal: function (val) {\n\t\t\tif (val === undefined) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (val === null) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (val === \"\") {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t},\n\t\tgetOriginalElementTitle: function (element) {\n\t\t\tvar savedOriginalTitle = kv.utils.getAttribute(element, 'data-orig-title'),\n\t\t\t\tcurrentTitle = element.title,\n\t\t\t\thasSavedOriginalTitle = kv.utils.hasAttribute(element, 'data-orig-title');\n\n\t\t\treturn hasSavedOriginalTitle ?\n\t\t\t\tsavedOriginalTitle : currentTitle;\n\t\t},\n\t\tasync: function (expr) {\n\t\t\tif (window.setImmediate) { window.setImmediate(expr); }\n\t\t\telse { window.setTimeout(expr, 0); }\n\t\t},\n\t\tforEach: function (object, callback) {\n\t\t\tif (kv.utils.isArray(object)) {\n\t\t\t\treturn forEach(object, callback);\n\t\t\t}\n\t\t\tfor (var prop in object) {\n\t\t\t\tif (object.hasOwnProperty(prop)) {\n\t\t\t\t\tcallback(object[prop], prop);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}());;var api = (function () {\n\n\tvar isInitialized = 0,\n\t\tconfiguration = kv.configuration,\n\t\tutils = kv.utils;\n\n\tfunction cleanUpSubscriptions(context) {\n\t\tforEach(context.subscriptions, function (subscription) {\n\t\t\tsubscription.dispose();\n\t\t});\n\t\tcontext.subscriptions = [];\n\t}\n\n\tfunction dispose(context) {\n\t\tif (context.options.deep) {\n\t\t\tforEach(context.flagged, function (obj) {\n\t\t\t\tdelete obj.__kv_traversed;\n\t\t\t});\n\t\t\tcontext.flagged.length = 0;\n\t\t}\n\n\t\tif (!context.options.live) {\n\t\t\tcleanUpSubscriptions(context);\n\t\t}\n\t}\n\n\tfunction runTraversal(obj, context) {\n\t\tcontext.validatables = [];\n\t\tcleanUpSubscriptions(context);\n\t\ttraverseGraph(obj, context);\n\t\tdispose(context);\n\t}\n\n\tfunction traverseGraph(obj, context, level) {\n\t\tvar objValues = [],\n\t\t\tval = obj.peek ? obj.peek() : obj;\n\n\t\tif (obj.__kv_traversed === true) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (context.options.deep) {\n\t\t\tobj.__kv_traversed = true;\n\t\t\tcontext.flagged.push(obj);\n\t\t}\n\n\t\t//default level value depends on deep option.\n\t\tlevel = (level !== undefined ? level : context.options.deep ? 1 : -1);\n\n\t\t// if object is observable then add it to the list\n\t\tif (ko.isObservable(obj)) {\n\t\t\t// ensure it's validatable but don't extend validatedObservable because it\n\t\t\t// would overwrite isValid property.\n\t\t\tif (!obj.errors && !utils.isValidatable(obj)) {\n\t\t\t\tobj.extend({ validatable: true });\n\t\t\t}\n\t\t\tcontext.validatables.push(obj);\n\n\t\t\tif (context.options.live && utils.isObservableArray(obj)) {\n\t\t\t\tcontext.subscriptions.push(obj.subscribe(function () {\n\t\t\t\t\tcontext.graphMonitor.valueHasMutated();\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\n\t\t//get list of values either from array or object but ignore non-objects\n\t\t// and destroyed objects\n\t\tif (val && !val._destroy) {\n\t\t\tif (utils.isArray(val)) {\n\t\t\t\tobjValues = val;\n\t\t\t}\n\t\t\telse if (utils.isObject(val)) {\n\t\t\t\tobjValues = utils.values(val);\n\t\t\t}\n\t\t}\n\n\t\t//process recursively if it is deep grouping\n\t\tif (level !== 0) {\n\t\t\tutils.forEach(objValues, function (observable) {\n\t\t\t\t//but not falsy things and not HTML Elements\n\t\t\t\tif (observable && !observable.nodeType && (!ko.isComputed(observable) || observable.rules)) {\n\t\t\t\t\ttraverseGraph(observable, context, level + 1);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction collectErrors(array) {\n\t\tvar errors = [];\n\t\tforEach(array, function (observable) {\n\t\t\t// Do not collect validatedObservable errors\n\t\t\tif (utils.isValidatable(observable) && !observable.isValid()) {\n\t\t\t\t// Use peek because we don't want a dependency for 'error' property because it\n\t\t\t\t// changes before 'isValid' does. (Issue #99)\n\t\t\t\terrors.push(observable.error.peek());\n\t\t\t}\n\t\t});\n\t\treturn errors;\n\t}\n\n\treturn {\n\t\t//Call this on startup\n\t\t//any config can be overridden with the passed in options\n\t\tinit: function (options, force) {\n\t\t\t//done run this multiple times if we don't really want to\n\t\t\tif (isInitialized > 0 && !force) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t//because we will be accessing options properties it has to be an object at least\n\t\t\toptions = options || {};\n\t\t\t//if specific error classes are not provided then apply generic errorClass\n\t\t\t//it has to be done on option so that options.errorClass can override default\n\t\t\t//errorElementClass and errorMessage class but not those provided in options\n\t\t\toptions.errorElementClass = options.errorElementClass || options.errorClass || configuration.errorElementClass;\n\t\t\toptions.errorMessageClass = options.errorMessageClass || options.errorClass || configuration.errorMessageClass;\n\n\t\t\textend(configuration, options);\n\n\t\t\tif (configuration.registerExtenders) {\n\t\t\t\tkv.registerExtenders();\n\t\t\t}\n\n\t\t\tisInitialized = 1;\n\t\t},\n\n\t\t// resets the config back to its original state\n\t\treset: kv.configuration.reset,\n\n\t\t// recursively walks a viewModel and creates an object that\n\t\t// provides validation information for the entire viewModel\n\t\t// obj -> the viewModel to walk\n\t\t// options -> {\n\t\t//\t  deep: false, // if true, will walk past the first level of viewModel properties\n\t\t//\t  observable: false // if true, returns a computed observable indicating if the viewModel is valid\n\t\t// }\n\t\tgroup: function group(obj, options) { // array of observables or viewModel\n\t\t\toptions = extend(extend({}, configuration.grouping), options);\n\n\t\t\tvar context = {\n\t\t\t\toptions: options,\n\t\t\t\tgraphMonitor: ko.observable(),\n\t\t\t\tflagged: [],\n\t\t\t\tsubscriptions: [],\n\t\t\t\tvalidatables: []\n\t\t\t};\n\n\t\t\tvar result = null;\n\n\t\t\t//if using observables then traverse structure once and add observables\n\t\t\tif (options.observable) {\n\t\t\t\tresult = ko.computed(function () {\n\t\t\t\t\tcontext.graphMonitor(); //register dependency\n\t\t\t\t\trunTraversal(obj, context);\n\t\t\t\t\treturn collectErrors(context.validatables);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse { //if not using observables then every call to error() should traverse the structure\n\t\t\t\tresult = function () {\n\t\t\t\t\trunTraversal(obj, context);\n\t\t\t\t\treturn collectErrors(context.validatables);\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tresult.showAllMessages = function (show) { // thanks @heliosPortal\n\t\t\t\tif (show === undefined) {//default to true\n\t\t\t\t\tshow = true;\n\t\t\t\t}\n\n\t\t\t\tresult.forEach(function (observable) {\n\t\t\t\t\tif (utils.isValidatable(observable)) {\n\t\t\t\t\t\tobservable.isModified(show);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tresult.isAnyMessageShown = function () {\n\t\t\t\tvar invalidAndModifiedPresent;\n\n\t\t\t\tinvalidAndModifiedPresent = !!result.find(function (observable) {\n\t\t\t\t\treturn utils.isValidatable(observable) && !observable.isValid() && observable.isModified();\n\t\t\t\t});\n\t\t\t\treturn invalidAndModifiedPresent;\n\t\t\t};\n\n\t\t\tresult.filter = function(predicate) {\n\t\t\t\tpredicate = predicate || function () { return true; };\n\t\t\t\t// ensure we have latest changes\n\t\t\t\tresult();\n\n\t\t\t\treturn koUtils.arrayFilter(context.validatables, predicate);\n\t\t\t};\n\n\t\t\tresult.find = function(predicate) {\n\t\t\t\tpredicate = predicate || function () { return true; };\n\t\t\t\t// ensure we have latest changes\n\t\t\t\tresult();\n\n\t\t\t\treturn koUtils.arrayFirst(context.validatables, predicate);\n\t\t\t};\n\n\t\t\tresult.forEach = function(callback) {\n\t\t\t\tcallback = callback || function () { };\n\t\t\t\t// ensure we have latest changes\n\t\t\t\tresult();\n\n\t\t\t\tforEach(context.validatables, callback);\n\t\t\t};\n\n\t\t\tresult.map = function(mapping) {\n\t\t\t\tmapping = mapping || function (item) { return item; };\n\t\t\t\t// ensure we have latest changes\n\t\t\t\tresult();\n\n\t\t\t\treturn koUtils.arrayMap(context.validatables, mapping);\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * @private You should not rely on this method being here.\n\t\t\t * It's a private method and it may change in the future.\n\t\t\t *\n\t\t\t * @description Updates the validated object and collects errors from it.\n\t\t\t */\n\t\t\tresult._updateState = function(newValue) {\n\t\t\t\tif (!utils.isObject(newValue)) {\n\t\t\t\t\tthrow new Error('An object is required.');\n\t\t\t\t}\n\t\t\t\tobj = newValue;\n\t\t\t\tif (options.observable) {\n\t\t\t\t\tcontext.graphMonitor.valueHasMutated();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\trunTraversal(newValue, context);\n\t\t\t\t\treturn collectErrors(context.validatables);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn result;\n\t\t},\n\n\t\tformatMessage: function (message, params, observable) {\n\t\t\tif (utils.isObject(params) && params.typeAttr) {\n\t\t\t\tparams = params.value;\n\t\t\t}\n\t\t\tif (typeof message === 'function') {\n\t\t\t\treturn message(params, observable);\n\t\t\t}\n\t\t\tvar replacements = unwrap(params);\n            if (replacements == null) {\n                replacements = [];\n            }\n\t\t\tif (!utils.isArray(replacements)) {\n\t\t\t\treplacements = [replacements];\n\t\t\t}\n\t\t\treturn message.replace(/{(\\d+)}/gi, function(match, index) {\n\t\t\t\tif (typeof replacements[index] !== 'undefined') {\n\t\t\t\t\treturn replacements[index];\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\t\t},\n\n\t\t// addRule:\n\t\t// This takes in a ko.observable and a Rule Context - which is just a rule name and params to supply to the validator\n\t\t// ie: kv.addRule(myObservable, {\n\t\t//\t\t  rule: 'required',\n\t\t//\t\t  params: true\n\t\t//\t  });\n\t\t//\n\t\taddRule: function (observable, rule) {\n\t\t\tobservable.extend({ validatable: true });\n\n\t\t\tvar hasRule = !!koUtils.arrayFirst(observable.rules(), function(item) {\n\t\t\t\treturn item.rule && item.rule === rule.rule;\n\t\t\t});\n\n\t\t\tif (!hasRule) {\n\t\t\t\t//push a Rule Context to the observables local array of Rule Contexts\n\t\t\t\tobservable.rules.push(rule);\n\t\t\t}\n\t\t\treturn observable;\n\t\t},\n\n\t\t// addAnonymousRule:\n\t\t// Anonymous Rules essentially have all the properties of a Rule, but are only specific for a certain property\n\t\t// and developers typically are wanting to add them on the fly or not register a rule with the 'kv.rules' object\n\t\t//\n\t\t// Example:\n\t\t// var test = ko.observable('something').extend{(\n\t\t//\t  validation: {\n\t\t//\t\t  validator: function(val, someOtherVal){\n\t\t//\t\t\t  return true;\n\t\t//\t\t  },\n\t\t//\t\t  message: \"Something must be really wrong!',\n\t\t//\t\t  params: true\n\t\t//\t  }\n\t\t//  )};\n\t\taddAnonymousRule: function (observable, ruleObj) {\n\t\t\tif (ruleObj['message'] === undefined) {\n\t\t\t\truleObj['message'] = 'Error';\n\t\t\t}\n\n\t\t\t//make sure onlyIf is honoured\n\t\t\tif (ruleObj.onlyIf) {\n\t\t\t\truleObj.condition = ruleObj.onlyIf;\n\t\t\t}\n\n\t\t\t//add the anonymous rule to the observable\n\t\t\tkv.addRule(observable, ruleObj);\n\t\t},\n\n\t\taddExtender: function (ruleName) {\n\t\t\tko.extenders[ruleName] = function (observable, params) {\n\t\t\t\t//params can come in a few flavors\n\t\t\t\t// 1. Just the params to be passed to the validator\n\t\t\t\t// 2. An object containing the Message to be used and the Params to pass to the validator\n\t\t\t\t// 3. A condition when the validation rule to be applied\n\t\t\t\t//\n\t\t\t\t// Example:\n\t\t\t\t// var test = ko.observable(3).extend({\n\t\t\t\t//\t  max: {\n\t\t\t\t//\t\t  message: 'This special field has a Max of {0}',\n\t\t\t\t//\t\t  params: 2,\n\t\t\t\t//\t\t  onlyIf: function() {\n\t\t\t\t//\t\t\t\t\t  return specialField.IsVisible();\n\t\t\t\t//\t\t\t\t  }\n\t\t\t\t//\t  }\n\t\t\t\t//  )};\n\t\t\t\t//\n\t\t\t\tif (params && (params.message || params.onlyIf)) { //if it has a message or condition object, then its an object literal to use\n\t\t\t\t\treturn kv.addRule(observable, {\n\t\t\t\t\t\trule: ruleName,\n\t\t\t\t\t\tmessage: params.message,\n\t\t\t\t\t\tparams: utils.isEmptyVal(params.params) ? true : params.params,\n\t\t\t\t\t\tcondition: params.onlyIf\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturn kv.addRule(observable, {\n\t\t\t\t\t\trule: ruleName,\n\t\t\t\t\t\tparams: params\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\n\t\t// loops through all kv.rules and adds them as extenders to\n\t\t// ko.extenders\n\t\tregisterExtenders: function () { // root extenders optional, use 'validation' extender if would cause conflicts\n\t\t\tif (configuration.registerExtenders) {\n\t\t\t\tfor (var ruleName in kv.rules) {\n\t\t\t\t\tif (kv.rules.hasOwnProperty(ruleName)) {\n\t\t\t\t\t\tif (!ko.extenders[ruleName]) {\n\t\t\t\t\t\t\tkv.addExtender(ruleName);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t//creates a span next to the @element with the specified error class\n\t\tinsertValidationMessage: function (element) {\n\t\t\tvar span = document.createElement('SPAN');\n\t\t\tspan.className = utils.getConfigOptions(element).errorMessageClass;\n\t\t\tutils.insertAfter(element, span);\n\t\t\treturn span;\n\t\t},\n\n\t\t// if html-5 validation attributes have been specified, this parses\n\t\t// the attributes on @element\n\t\tparseInputValidationAttributes: function (element, valueAccessor) {\n\t\t\tforEach(kv.configuration.html5Attributes, function (attr) {\n\t\t\t\tif (utils.hasAttribute(element, attr)) {\n\n\t\t\t\t\tvar params = element.getAttribute(attr) || true;\n\n\t\t\t\t\tif (attr === 'min' || attr === 'max')\n\t\t\t\t\t{\n\t\t\t\t\t\t// If we're validating based on the min and max attributes, we'll\n\t\t\t\t\t\t// need to know what the 'type' attribute is set to\n\t\t\t\t\t\tvar typeAttr = element.getAttribute('type');\n\t\t\t\t\t\tif (typeof typeAttr === \"undefined\" || !typeAttr)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// From http://www.w3.org/TR/html-markup/input:\n\t\t\t\t\t\t\t//   An input element with no type attribute specified represents the\n\t\t\t\t\t\t\t//   same thing as an input element with its type attribute set to \"text\".\n\t\t\t\t\t\t\ttypeAttr = \"text\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tparams = {typeAttr: typeAttr, value: params};\n\t\t\t\t\t}\n\n\t\t\t\t\tkv.addRule(valueAccessor(), {\n\t\t\t\t\t\trule: attr,\n\t\t\t\t\t\tparams: params\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tvar currentType = element.getAttribute('type');\n\t\t\tforEach(kv.configuration.html5InputTypes, function (type) {\n\t\t\t\tif (type === currentType) {\n\t\t\t\t\tkv.addRule(valueAccessor(), {\n\t\t\t\t\t\trule: (type === 'date') ? 'dateISO' : type,\n\t\t\t\t\t\tparams: true\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t// writes html5 validation attributes on the element passed in\n\t\twriteInputValidationAttributes: function (element, valueAccessor) {\n\t\t\tvar observable = valueAccessor();\n\n\t\t\tif (!observable || !observable.rules) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar contexts = observable.rules(); // observable array\n\n\t\t\t// loop through the attributes and add the information needed\n\t\t\tforEach(kv.configuration.html5Attributes, function (attr) {\n\t\t\t\tvar ctx = koUtils.arrayFirst(contexts, function (ctx) {\n\t\t\t\t\treturn ctx.rule && ctx.rule.toLowerCase() === attr.toLowerCase();\n\t\t\t\t});\n\n\t\t\t\tif (!ctx) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// we have a rule matching a validation attribute at this point\n\t\t\t\t// so lets add it to the element along with the params\n\t\t\t\tko.computed({\n\t\t\t\t\tread: function() {\n\t\t\t\t\t\tvar params = ko.unwrap(ctx.params);\n\n\t\t\t\t\t\t// we have to do some special things for the pattern validation\n\t\t\t\t\t\tif (ctx.rule === \"pattern\" && params instanceof RegExp) {\n\t\t\t\t\t\t\t// we need the pure string representation of the RegExpr without the //gi stuff\n\t\t\t\t\t\t\tparams = params.source;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\telement.setAttribute(attr, params);\n\t\t\t\t\t},\n\t\t\t\t\tdisposeWhenNodeIsRemoved: element\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tcontexts = null;\n\t\t},\n\n\t\t//take an existing binding handler and make it cause automatic validations\n\t\tmakeBindingHandlerValidatable: function (handlerName) {\n\t\t\tvar init = ko.bindingHandlers[handlerName].init;\n\n\t\t\tko.bindingHandlers[handlerName].init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\n\n\t\t\t\tinit(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);\n\n\t\t\t\treturn ko.bindingHandlers['validationCore'].init(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);\n\t\t\t};\n\t\t},\n\n\t\t// visit an objects properties and apply validation rules from a definition\n\t\tsetRules: function (target, definition) {\n\t\t\tvar setRules = function (target, definition) {\n\t\t\t\tif (!target || !definition) { return; }\n\n\t\t\t\tfor (var prop in definition) {\n\t\t\t\t\tif (!definition.hasOwnProperty(prop)) { continue; }\n\t\t\t\t\tvar ruleDefinitions = definition[prop];\n\n\t\t\t\t\t//check the target property exists and has a value\n\t\t\t\t\tif (!target[prop]) { continue; }\n\t\t\t\t\tvar targetValue = target[prop],\n\t\t\t\t\t\tunwrappedTargetValue = unwrap(targetValue),\n\t\t\t\t\t\trules = {},\n\t\t\t\t\t\tnonRules = {};\n\n\t\t\t\t\tfor (var rule in ruleDefinitions) {\n\t\t\t\t\t\tif (!ruleDefinitions.hasOwnProperty(rule)) { continue; }\n\t\t\t\t\t\tif (kv.rules[rule]) {\n\t\t\t\t\t\t\trules[rule] = ruleDefinitions[rule];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnonRules[rule] = ruleDefinitions[rule];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t//apply rules\n\t\t\t\t\tif (ko.isObservable(targetValue)) {\n\t\t\t\t\t\ttargetValue.extend(rules);\n\t\t\t\t\t}\n\n\t\t\t\t\t//then apply child rules\n\t\t\t\t\t//if it's an array, apply rules to all children\n\t\t\t\t\tif (unwrappedTargetValue && utils.isArray(unwrappedTargetValue)) {\n\t\t\t\t\t\tfor (var i = 0; i < unwrappedTargetValue.length; i++) {\n\t\t\t\t\t\t\tsetRules(unwrappedTargetValue[i], nonRules);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//otherwise, just apply to this property\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetRules(unwrappedTargetValue, nonRules);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tsetRules(target, definition);\n\t\t}\n\t};\n\n}());\n\n// expose api publicly\nextend(ko.validation, api);\n;//Validation Rules:\n// You can view and override messages or rules via:\n// kv.rules[ruleName]\n//\n// To implement a custom Rule, simply use this template:\n// kv.rules['<custom rule name>'] = {\n//      validator: function (val, param) {\n//          <custom logic>\n//          return <true or false>;\n//      },\n//      message: '<custom validation message>' //optionally you can also use a '{0}' to denote a placeholder that will be replaced with your 'param'\n// };\n//\n// Example:\n// kv.rules['mustEqual'] = {\n//      validator: function( val, mustEqualVal ){\n//          return val === mustEqualVal;\n//      },\n//      message: 'This field must equal {0}'\n// };\n//\nkv.rules = {};\nkv.rules['required'] = {\n\tvalidator: function (val, required) {\n\t\tvar testVal;\n\n\t\tif (val === undefined || val === null) {\n\t\t\treturn !required;\n\t\t}\n\n\t\ttestVal = val;\n\t\tif (typeof (val) === 'string') {\n\t\t\tif (String.prototype.trim) {\n\t\t\t\ttestVal = val.trim();\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttestVal = val.replace(/^\\s+|\\s+$/g, '');\n\t\t\t}\n\t\t}\n\n\t\tif (!required) {// if they passed: { required: false }, then don't require this\n\t\t\treturn true;\n\t\t}\n\n\t\treturn ((testVal + '').length > 0);\n\t},\n\tmessage: 'This field is required.'\n};\n\nfunction minMaxValidatorFactory(validatorName) {\n    var isMaxValidation = validatorName === \"max\";\n\n    return function (val, options) {\n        if (kv.utils.isEmptyVal(val)) {\n            return true;\n        }\n\n        var comparisonValue, type;\n        if (options.typeAttr === undefined) {\n            // This validator is being called from javascript rather than\n            // being bound from markup\n            type = \"text\";\n            comparisonValue = options;\n        } else {\n            type = options.typeAttr;\n            comparisonValue = options.value;\n        }\n\n        // From http://www.w3.org/TR/2012/WD-html5-20121025/common-input-element-attributes.html#attr-input-min,\n        // if the value is parseable to a number, then the minimum should be numeric\n        if (!isNaN(comparisonValue) && !(comparisonValue instanceof Date)) {\n            type = \"number\";\n        }\n\n        var regex, valMatches, comparisonValueMatches;\n        switch (type.toLowerCase()) {\n            case \"week\":\n                regex = /^(\\d{4})-W(\\d{2})$/;\n                valMatches = val.match(regex);\n                if (valMatches === null) {\n                    throw new Error(\"Invalid value for \" + validatorName + \" attribute for week input.  Should look like \" +\n                        \"'2000-W33' http://www.w3.org/TR/html-markup/input.week.html#input.week.attrs.min\");\n                }\n                comparisonValueMatches = comparisonValue.match(regex);\n                // If no regex matches were found, validation fails\n                if (!comparisonValueMatches) {\n                    return false;\n                }\n\n                if (isMaxValidation) {\n                    return (valMatches[1] < comparisonValueMatches[1]) || // older year\n                        // same year, older week\n                        ((valMatches[1] === comparisonValueMatches[1]) && (valMatches[2] <= comparisonValueMatches[2]));\n                } else {\n                    return (valMatches[1] > comparisonValueMatches[1]) || // newer year\n                        // same year, newer week\n                        ((valMatches[1] === comparisonValueMatches[1]) && (valMatches[2] >= comparisonValueMatches[2]));\n                }\n                break;\n\n            case \"month\":\n                regex = /^(\\d{4})-(\\d{2})$/;\n                valMatches = val.match(regex);\n                if (valMatches === null) {\n                    throw new Error(\"Invalid value for \" + validatorName + \" attribute for month input.  Should look like \" +\n                        \"'2000-03' http://www.w3.org/TR/html-markup/input.month.html#input.month.attrs.min\");\n                }\n                comparisonValueMatches = comparisonValue.match(regex);\n                // If no regex matches were found, validation fails\n                if (!comparisonValueMatches) {\n                    return false;\n                }\n\n                if (isMaxValidation) {\n                    return ((valMatches[1] < comparisonValueMatches[1]) || // older year\n                        // same year, older month\n                        ((valMatches[1] === comparisonValueMatches[1]) && (valMatches[2] <= comparisonValueMatches[2])));\n                } else {\n                    return (valMatches[1] > comparisonValueMatches[1]) || // newer year\n                        // same year, newer month\n                        ((valMatches[1] === comparisonValueMatches[1]) && (valMatches[2] >= comparisonValueMatches[2]));\n                }\n                break;\n\n            case \"number\":\n            case \"range\":\n                if (isMaxValidation) {\n                    return (!isNaN(val) && parseFloat(val) <= parseFloat(comparisonValue));\n                } else {\n                    return (!isNaN(val) && parseFloat(val) >= parseFloat(comparisonValue));\n                }\n                break;\n\n            default:\n                if (isMaxValidation) {\n                    return val <= comparisonValue;\n                } else {\n                    return val >= comparisonValue;\n                }\n        }\n    };\n}\n\nkv.rules['min'] = {\n\tvalidator: minMaxValidatorFactory(\"min\"),\n\tmessage: 'Please enter a value greater than or equal to {0}.'\n};\n\nkv.rules['max'] = {\n\tvalidator: minMaxValidatorFactory(\"max\"),\n\tmessage: 'Please enter a value less than or equal to {0}.'\n};\n\nkv.rules['minLength'] = {\n\tvalidator: function (val, minLength) {\n\t\tif(kv.utils.isEmptyVal(val)) { return true; }\n\t\tvar normalizedVal = kv.utils.isNumber(val) ? ('' + val) : val;\n\t\treturn normalizedVal.length >= minLength;\n\t},\n\tmessage: 'Please enter at least {0} characters.'\n};\n\nkv.rules['maxLength'] = {\n\tvalidator: function (val, maxLength) {\n\t\tif(kv.utils.isEmptyVal(val)) { return true; }\n\t\tvar normalizedVal = kv.utils.isNumber(val) ? ('' + val) : val;\n\t\treturn normalizedVal.length <= maxLength;\n\t},\n\tmessage: 'Please enter no more than {0} characters.'\n};\n\nkv.rules['pattern'] = {\n\tvalidator: function (val, regex) {\n\t\treturn kv.utils.isEmptyVal(val) || val.toString().match(regex) !== null;\n\t},\n\tmessage: 'Please check this value.'\n};\n\nkv.rules['step'] = {\n\tvalidator: function (val, step) {\n\n\t\t// in order to handle steps of .1 & .01 etc.. Modulus won't work\n\t\t// if the value is a decimal, so we have to correct for that\n\t\tif (kv.utils.isEmptyVal(val) || step === 'any') { return true; }\n\t\tvar dif = (val * 100) % (step * 100);\n\t\treturn Math.abs(dif) < 0.00001 || Math.abs(1 - dif) < 0.00001;\n\t},\n\tmessage: 'The value must increment by {0}.'\n};\n\nkv.rules['email'] = {\n\tvalidator: function (val, validate) {\n\t\tif (!validate) { return true; }\n\n\t\t//I think an empty email address is also a valid entry\n\t\t//if one want's to enforce entry it should be done with 'required: true'\n\t\treturn kv.utils.isEmptyVal(val) || (\n\t\t\t// jquery validate regex - thanks Scott Gonzalez\n\t\t\tvalidate && /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i.test(val)\n\t\t);\n\t},\n\tmessage: 'Please enter a proper email address.'\n};\n\nkv.rules['date'] = {\n\tvalidator: function (value, validate) {\n\t\tif (!validate) { return true; }\n\t\treturn kv.utils.isEmptyVal(value) || (validate && !/Invalid|NaN/.test(new Date(value)));\n\t},\n\tmessage: 'Please enter a proper date.'\n};\n\nkv.rules['dateISO'] = {\n\tvalidator: function (value, validate) {\n\t\tif (!validate) { return true; }\n\t\treturn kv.utils.isEmptyVal(value) || (validate && /^\\d{4}[-/](?:0?[1-9]|1[012])[-/](?:0?[1-9]|[12][0-9]|3[01])$/.test(value));\n\t},\n\tmessage: 'Please enter a proper date.'\n};\n\nkv.rules['number'] = {\n\tvalidator: function (value, validate) {\n\t\tif (!validate) { return true; }\n\t\treturn kv.utils.isEmptyVal(value) || (validate && /^-?(?:\\d+|\\d{1,3}(?:,\\d{3})+)?(?:\\.\\d+)?$/.test(value));\n\t},\n\tmessage: 'Please enter a number.'\n};\n\nkv.rules['digit'] = {\n\tvalidator: function (value, validate) {\n\t\tif (!validate) { return true; }\n\t\treturn kv.utils.isEmptyVal(value) || (validate && /^\\d+$/.test(value));\n\t},\n\tmessage: 'Please enter a digit.'\n};\n\nkv.rules['phoneUS'] = {\n\tvalidator: function (phoneNumber, validate) {\n\t\tif (!validate) { return true; }\n\t\tif (kv.utils.isEmptyVal(phoneNumber)) { return true; } // makes it optional, use 'required' rule if it should be required\n\t\tif (typeof (phoneNumber) !== 'string') { return false; }\n\t\tphoneNumber = phoneNumber.replace(/\\s+/g, \"\");\n\t\treturn validate && phoneNumber.length > 9 && phoneNumber.match(/^(1-?)?(\\([2-9]\\d{2}\\)|[2-9]\\d{2})-?[2-9]\\d{2}-?\\d{4}$/);\n\t},\n\tmessage: 'Please specify a valid phone number.'\n};\n\nkv.rules['equal'] = {\n\tvalidator: function (val, params) {\n\t\tvar otherValue = params;\n\t\treturn val === kv.utils.getValue(otherValue);\n\t},\n\tmessage: 'Values must equal.'\n};\n\nkv.rules['notEqual'] = {\n\tvalidator: function (val, params) {\n\t\tvar otherValue = params;\n\t\treturn val !== kv.utils.getValue(otherValue);\n\t},\n\tmessage: 'Please choose another value.'\n};\n\n//unique in collection\n// options are:\n//    collection: array or function returning (observable) array\n//              in which the value has to be unique\n//    valueAccessor: function that returns value from an object stored in collection\n//              if it is null the value is compared directly\n//    external: set to true when object you are validating is automatically updating collection\nkv.rules['unique'] = {\n\tvalidator: function (val, options) {\n\t\tvar c = kv.utils.getValue(options.collection),\n\t\t\texternal = kv.utils.getValue(options.externalValue),\n\t\t\tcounter = 0;\n\n\t\tif (!val || !c) { return true; }\n\n\t\tkoUtils.arrayFilter(c, function (item) {\n\t\t\tif (val === (options.valueAccessor ? options.valueAccessor(item) : item)) { counter++; }\n\t\t});\n\t\t// if value is external even 1 same value in collection means the value is not unique\n\t\treturn counter < (!!external ? 1 : 2);\n\t},\n\tmessage: 'Please make sure the value is unique.'\n};\n\n\n//now register all of these!\n(function () {\n\tkv.registerExtenders();\n}());\n;// The core binding handler\n// this allows us to setup any value binding that internally always\n// performs the same functionality\nko.bindingHandlers['validationCore'] = (function () {\n\n\treturn {\n\t\tinit: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\n\t\t\tvar config = kv.utils.getConfigOptions(element);\n\t\t\tvar observable = valueAccessor();\n\n\t\t\t// parse html5 input validation attributes, optional feature\n\t\t\tif (config.parseInputAttributes) {\n\t\t\t\tkv.utils.async(function () { kv.parseInputValidationAttributes(element, valueAccessor); });\n\t\t\t}\n\n\t\t\t// if requested insert message element and apply bindings\n\t\t\tif (config.insertMessages && kv.utils.isValidatable(observable)) {\n\n\t\t\t\t// insert the <span></span>\n\t\t\t\tvar validationMessageElement = kv.insertValidationMessage(element);\n\n\t\t\t\t// if we're told to use a template, make sure that gets rendered\n\t\t\t\tif (config.messageTemplate) {\n\t\t\t\t\tko.renderTemplate(config.messageTemplate, { field: observable }, null, validationMessageElement, 'replaceNode');\n\t\t\t\t} else {\n\t\t\t\t\tko.applyBindingsToNode(validationMessageElement, { validationMessage: observable });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// write the html5 attributes if indicated by the config\n\t\t\tif (config.writeInputAttributes && kv.utils.isValidatable(observable)) {\n\n\t\t\t\tkv.writeInputValidationAttributes(element, valueAccessor);\n\t\t\t}\n\n\t\t\t// if requested, add binding to decorate element\n\t\t\tif (config.decorateInputElement && kv.utils.isValidatable(observable)) {\n\t\t\t\tko.applyBindingsToNode(element, { validationElement: observable });\n\t\t\t}\n\t\t}\n\t};\n\n}());\n\n// override for KO's default 'value', 'checked', 'textInput' and selectedOptions bindings\nkv.makeBindingHandlerValidatable(\"value\");\nkv.makeBindingHandlerValidatable(\"checked\");\nif (ko.bindingHandlers.textInput) {\n\tkv.makeBindingHandlerValidatable(\"textInput\");\n}\nkv.makeBindingHandlerValidatable(\"selectedOptions\");\n\n\nko.bindingHandlers['validationMessage'] = { // individual error message, if modified or post binding\n\tupdate: function (element, valueAccessor) {\n\t\tvar obsv = valueAccessor(),\n\t\t\tconfig = kv.utils.getConfigOptions(element),\n\t\t\tval = unwrap(obsv),\n\t\t\tmsg = null,\n\t\t\tisModified = false,\n\t\t\tisValid = false;\n\n\t\tif (obsv === null || typeof obsv === 'undefined') {\n\t\t\tthrow new Error('Cannot bind validationMessage to undefined value. data-bind expression: ' +\n\t\t\t\telement.getAttribute('data-bind'));\n\t\t}\n\n\t\tisModified = obsv.isModified && obsv.isModified();\n\t\tisValid = obsv.isValid && obsv.isValid();\n\n\t\tvar error = null;\n\t\tif (!config.messagesOnModified || isModified) {\n\t\t\terror = isValid ? null : obsv.error;\n\t\t}\n\n\t\tvar isVisible = !config.messagesOnModified || isModified ? !isValid : false;\n\t\tvar isCurrentlyVisible = element.style.display !== \"none\";\n\n\t\tif (config.allowHtmlMessages) {\n\t\t\tkoUtils.setHtml(element, error);\n\t\t} else {\n\t\t\tko.bindingHandlers.text.update(element, function () { return error; });\n\t\t}\n\n\t\tif (isCurrentlyVisible && !isVisible) {\n\t\t\telement.style.display = 'none';\n\t\t} else if (!isCurrentlyVisible && isVisible) {\n\t\t\telement.style.display = '';\n\t\t}\n\t}\n};\n\nko.bindingHandlers['validationElement'] = {\n\tupdate: function (element, valueAccessor, allBindingsAccessor) {\n\t\tvar obsv = valueAccessor(),\n\t\t\tconfig = kv.utils.getConfigOptions(element),\n\t\t\tval = unwrap(obsv),\n\t\t\tmsg = null,\n\t\t\tisModified = false,\n\t\t\tisValid = false;\n\n\t\tif (obsv === null || typeof obsv === 'undefined') {\n\t\t\tthrow new Error('Cannot bind validationElement to undefined value. data-bind expression: ' +\n\t\t\t\telement.getAttribute('data-bind'));\n\t\t}\n\n\t\tisModified = obsv.isModified && obsv.isModified();\n\t\tisValid = obsv.isValid && obsv.isValid();\n\n\t\t// create an evaluator function that will return something like:\n\t\t// css: { validationElement: true }\n\t\tvar cssSettingsAccessor = function () {\n\t\t\tvar css = {};\n\n\t\t\tvar shouldShow = ((!config.decorateElementOnModified || isModified) ? !isValid : false);\n\n\t\t\t// css: { validationElement: false }\n\t\t\tcss[config.errorElementClass] = shouldShow;\n\n\t\t\treturn css;\n\t\t};\n\n\t\t//add or remove class on the element;\n\t\tko.bindingHandlers.css.update(element, cssSettingsAccessor, allBindingsAccessor);\n\t\tif (!config.errorsAsTitle) { return; }\n\n\t\tko.bindingHandlers.attr.update(element, function () {\n\t\t\tvar\n\t\t\t\thasModification = !config.errorsAsTitleOnModified || isModified,\n\t\t\t\ttitle = kv.utils.getOriginalElementTitle(element);\n\n\t\t\tif (hasModification && !isValid) {\n\t\t\t\treturn { title: obsv.error, 'data-orig-title': title };\n\t\t\t} else if (!hasModification || isValid) {\n\t\t\t\treturn { title: title, 'data-orig-title': null };\n\t\t\t}\n\t\t});\n\t}\n};\n\n// ValidationOptions:\n// This binding handler allows you to override the initial config by setting any of the options for a specific element or context of elements\n//\n// Example:\n// <div data-bind=\"validationOptions: { insertMessages: true, messageTemplate: 'customTemplate', errorMessageClass: 'mySpecialClass'}\">\n//      <input type=\"text\" data-bind=\"value: someValue\"/>\n//      <input type=\"text\" data-bind=\"value: someValue2\"/>\n// </div>\nko.bindingHandlers['validationOptions'] = (function () {\n\treturn {\n\t\tinit: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\n\t\t\tvar options = unwrap(valueAccessor());\n\t\t\tif (options) {\n\t\t\t\tvar newConfig = extend({}, kv.configuration);\n\t\t\t\textend(newConfig, options);\n\n\t\t\t\t//store the validation options on the node so we can retrieve it later\n\t\t\t\tkv.utils.setDomData(element, newConfig);\n\t\t\t}\n\t\t}\n\t};\n}());\n;// Validation Extender:\n// This is for creating custom validation logic on the fly\n// Example:\n// var test = ko.observable('something').extend{(\n//      validation: {\n//          validator: function(val, someOtherVal){\n//              return true;\n//          },\n//          message: \"Something must be really wrong!',\n//          params: true\n//      }\n//  )};\nko.extenders['validation'] = function (observable, rules) { // allow single rule or array\n\tforEach(kv.utils.isArray(rules) ? rules : [rules], function (rule) {\n\t\t// the 'rule' being passed in here has no name to identify a core Rule,\n\t\t// so we add it as an anonymous rule\n\t\t// If the developer is wanting to use a core Rule, but use a different message see the 'addExtender' logic for examples\n\t\tkv.addAnonymousRule(observable, rule);\n\t});\n\treturn observable;\n};\n\n//This is the extender that makes a Knockout Observable also 'Validatable'\n//examples include:\n// 1. var test = ko.observable('something').extend({validatable: true});\n// this will ensure that the Observable object is setup properly to respond to rules\n//\n// 2. test.extend({validatable: false});\n// this will remove the validation properties from the Observable object should you need to do that.\nko.extenders['validatable'] = function (observable, options) {\n\tif (!kv.utils.isObject(options)) {\n\t\toptions = { enable: options };\n\t}\n\n\tif (!('enable' in options)) {\n\t\toptions.enable = true;\n\t}\n\n\tif (options.enable && !kv.utils.isValidatable(observable)) {\n\t\tvar config = kv.configuration.validate || {};\n\t\tvar validationOptions = {\n\t\t\tthrottleEvaluation : options.throttle || config.throttle\n\t\t};\n\n\t\tobservable.error = ko.observable(null); // holds the error message, we only need one since we stop processing validators when one is invalid\n\n\t\t// observable.rules:\n\t\t// ObservableArray of Rule Contexts, where a Rule Context is simply the name of a rule and the params to supply to it\n\t\t//\n\t\t// Rule Context = { rule: '<rule name>', params: '<passed in params>', message: '<Override of default Message>' }\n\t\tobservable.rules = ko.observableArray(); //holds the rule Contexts to use as part of validation\n\n\t\t//in case async validation is occurring\n\t\tobservable.isValidating = ko.observable(false);\n\n\t\t//the true holder of whether the observable is valid or not\n\t\tobservable.__valid__ = ko.observable(true);\n\n\t\tobservable.isModified = ko.observable(false);\n\n\t\t// a semi-protected observable\n\t\tobservable.isValid = ko.computed(observable.__valid__);\n\n\t\t//manually set error state\n\t\tobservable.setError = function (error) {\n\t\t\tvar previousError = observable.error.peek();\n\t\t\tvar previousIsValid = observable.__valid__.peek();\n\n\t\t\tobservable.error(error);\n\t\t\tobservable.__valid__(false);\n\n\t\t\tif (previousError !== error && !previousIsValid) {\n\t\t\t\t// if the observable was not valid before then isValid will not mutate,\n\t\t\t\t// hence causing any grouping to not display the latest error.\n\t\t\t\tobservable.isValid.notifySubscribers();\n\t\t\t}\n\t\t};\n\n\t\t//manually clear error state\n\t\tobservable.clearError = function () {\n\t\t\tobservable.error(null);\n\t\t\tobservable.__valid__(true);\n\t\t\treturn observable;\n\t\t};\n\n\t\t//subscribe to changes in the observable\n\t\tvar h_change = observable.subscribe(function () {\n\t\t\tobservable.isModified(true);\n\t\t});\n\n\t\t// we use a computed here to ensure that anytime a dependency changes, the\n\t\t// validation logic evaluates\n\t\tvar h_obsValidationTrigger = ko.computed(extend({\n\t\t\tread: function () {\n\t\t\t\tvar obs = observable(),\n\t\t\t\t\truleContexts = observable.rules();\n\n\t\t\t\tkv.validateObservable(observable);\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}, validationOptions));\n\n\t\textend(h_obsValidationTrigger, validationOptions);\n\n\t\tobservable._disposeValidation = function () {\n\t\t\t//first dispose of the subscriptions\n\t\t\tobservable.isValid.dispose();\n\t\t\tobservable.rules.removeAll();\n\t\t\th_change.dispose();\n\t\t\th_obsValidationTrigger.dispose();\n\n\t\t\tdelete observable['rules'];\n\t\t\tdelete observable['error'];\n\t\t\tdelete observable['isValid'];\n\t\t\tdelete observable['isValidating'];\n\t\t\tdelete observable['__valid__'];\n\t\t\tdelete observable['isModified'];\n            delete observable['setError'];\n            delete observable['clearError'];\n            delete observable['_disposeValidation'];\n\t\t};\n\t} else if (options.enable === false && observable._disposeValidation) {\n\t\tobservable._disposeValidation();\n\t}\n\treturn observable;\n};\n\nfunction validateSync(observable, rule, ctx) {\n\t//Execute the validator and see if its valid\n\tif (!rule.validator(observable(), (ctx.params === undefined ? true : unwrap(ctx.params)))) { // default param is true, eg. required = true\n\n\t\t//not valid, so format the error message and stick it in the 'error' variable\n\t\tobservable.setError(kv.formatMessage(\n\t\t\t\t\tctx.message || rule.message,\n\t\t\t\t\tunwrap(ctx.params),\n\t\t\t\t\tobservable));\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\n\nfunction validateAsync(observable, rule, ctx) {\n\tobservable.isValidating(true);\n\n\tvar callBack = function (valObj) {\n\t\tvar isValid = false,\n\t\t\tmsg = '';\n\n\t\tif (!observable.__valid__()) {\n\n\t\t\t// since we're returning early, make sure we turn this off\n\t\t\tobservable.isValidating(false);\n\n\t\t\treturn; //if its already NOT valid, don't add to that\n\t\t}\n\n\t\t//we were handed back a complex object\n\t\tif (valObj['message']) {\n\t\t\tisValid = valObj.isValid;\n\t\t\tmsg = valObj.message;\n\t\t} else {\n\t\t\tisValid = valObj;\n\t\t}\n\n\t\tif (!isValid) {\n\t\t\t//not valid, so format the error message and stick it in the 'error' variable\n\t\t\tobservable.error(kv.formatMessage(\n\t\t\t\tmsg || ctx.message || rule.message,\n\t\t\t\tunwrap(ctx.params),\n\t\t\t\tobservable));\n\t\t\tobservable.__valid__(isValid);\n\t\t}\n\n\t\t// tell it that we're done\n\t\tobservable.isValidating(false);\n\t};\n\n\tkv.utils.async(function() {\n\t    //fire the validator and hand it the callback\n        rule.validator(observable(), ctx.params === undefined ? true : unwrap(ctx.params), callBack);\n\t});\n}\n\nkv.validateObservable = function (observable) {\n\tvar i = 0,\n\t\trule, // the rule validator to execute\n\t\tctx, // the current Rule Context for the loop\n\t\truleContexts = observable.rules(), //cache for iterator\n\t\tlen = ruleContexts.length; //cache for iterator\n\n\tfor (; i < len; i++) {\n\n\t\t//get the Rule Context info to give to the core Rule\n\t\tctx = ruleContexts[i];\n\n\t\t// checks an 'onlyIf' condition\n\t\tif (ctx.condition && !ctx.condition()) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t//get the core Rule to use for validation\n\t\trule = ctx.rule ? kv.rules[ctx.rule] : ctx;\n\n\t\tif (rule['async'] || ctx['async']) {\n\t\t\t//run async validation\n\t\t\tvalidateAsync(observable, rule, ctx);\n\n\t\t} else {\n\t\t\t//run normal sync validation\n\t\t\tif (!validateSync(observable, rule, ctx)) {\n\t\t\t\treturn false; //break out of the loop\n\t\t\t}\n\t\t}\n\t}\n\t//finally if we got this far, make the observable valid again!\n\tobservable.clearError();\n\treturn true;\n};\n;\nvar _locales = {};\nvar _currentLocale;\n\nkv.defineLocale = function(name, values) {\n\tif (name && values) {\n\t\t_locales[name.toLowerCase()] = values;\n\t\treturn values;\n\t}\n\treturn null;\n};\n\nkv.locale = function(name) {\n\tif (name) {\n\t\tname = name.toLowerCase();\n\n\t\tif (_locales.hasOwnProperty(name)) {\n\t\t\tkv.localize(_locales[name]);\n\t\t\t_currentLocale = name;\n\t\t}\n\t\telse {\n\t\t\tthrow new Error('Localization ' + name + ' has not been loaded.');\n\t\t}\n\t}\n\treturn _currentLocale;\n};\n\n//quick function to override rule messages\nkv.localize = function (msgTranslations) {\n\tvar rules = kv.rules;\n\n\t//loop the properties in the object and assign the msg to the rule\n\tfor (var ruleName in msgTranslations) {\n\t\tif (rules.hasOwnProperty(ruleName)) {\n\t\t\trules[ruleName].message = msgTranslations[ruleName];\n\t\t}\n\t}\n};\n\n// Populate default locale (this will make en-US.js somewhat redundant)\n(function() {\n\tvar localeData = {};\n\tvar rules = kv.rules;\n\n\tfor (var ruleName in rules) {\n\t\tif (rules.hasOwnProperty(ruleName)) {\n\t\t\tlocaleData[ruleName] = rules[ruleName].message;\n\t\t}\n\t}\n\tkv.defineLocale('en-us', localeData);\n})();\n\n// No need to invoke locale because the messages are already defined along with the rules for en-US\n_currentLocale = 'en-us';\n;/**\n * Possible invocations:\n * \t\tapplyBindingsWithValidation(viewModel)\n * \t\tapplyBindingsWithValidation(viewModel, options)\n * \t\tapplyBindingsWithValidation(viewModel, rootNode)\n *\t\tapplyBindingsWithValidation(viewModel, rootNode, options)\n */\nko.applyBindingsWithValidation = function (viewModel, rootNode, options) {\n\tvar node = document.body,\n\t\tconfig;\n\n\tif (rootNode && rootNode.nodeType) {\n\t\tnode = rootNode;\n\t\tconfig = options;\n\t}\n\telse {\n\t\tconfig = rootNode;\n\t}\n\n\tkv.init();\n\n\tif (config) {\n\t\tconfig = extend(extend({}, kv.configuration), config);\n\t\tkv.utils.setDomData(node, config);\n\t}\n\n\tko.applyBindings(viewModel, node);\n};\n\n//override the original applyBindings so that we can ensure all new rules and what not are correctly registered\nvar origApplyBindings = ko.applyBindings;\nko.applyBindings = function (viewModel, rootNode) {\n\n\tkv.init();\n\n\torigApplyBindings(viewModel, rootNode);\n};\n\nko.validatedObservable = function (initialValue, options) {\n\tif (!options && !kv.utils.isObject(initialValue)) {\n\t\treturn ko.observable(initialValue).extend({ validatable: true });\n\t}\n\n\tvar obsv = ko.observable(initialValue);\n\tobsv.errors = kv.group(kv.utils.isObject(initialValue) ? initialValue : {}, options);\n\tobsv.isValid = ko.observable(obsv.errors().length === 0);\n\n\tif (ko.isObservable(obsv.errors)) {\n\t\tobsv.errors.subscribe(function(errors) {\n\t\t\tobsv.isValid(errors.length === 0);\n\t\t});\n\t}\n\telse {\n\t\tko.computed(obsv.errors).subscribe(function (errors) {\n\t\t\tobsv.isValid(errors.length === 0);\n\t\t});\n\t}\n\n\tobsv.subscribe(function(newValue) {\n\t\tif (!kv.utils.isObject(newValue)) {\n\t\t\t/*\n\t\t\t * The validation group works on objects.\n\t\t\t * Since the new value is a primitive (scalar, null or undefined) we need\n\t\t\t * to create an empty object to pass along.\n\t\t\t */\n\t\t\tnewValue = {};\n\t\t}\n\t\t// Force the group to refresh\n\t\tobsv.errors._updateState(newValue);\n\t\tobsv.isValid(obsv.errors().length === 0);\n\t});\n\n\treturn obsv;\n};\n;}));","/home/travis/build/npmtest/node-npmtest-knockout.validation/node_modules/knockout.validation/localization/ar-JO.js":"/**\n * Localization file for Arabic - Jordan (ar-JO)\n */\n(function(factory) {\n\t// Module systems magic dance.\n\t/*global require,ko.validation,define,module*/\n\tif (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n\t\t// CommonJS or Node\n\t\tmodule.exports = factory(require('../'));\n\t} else if (typeof define === 'function' && define['amd']) {\n\t\t// AMD anonymous module with hard-coded dependency on 'knockout.validation'\n\t\tdefine(['knockout.validation'], factory);\n\t} else {\n\t\t// <script> tag: use the global `ko.validation` object\n\t\tfactory(ko.validation);\n\t}\n}(function(kv) {\n\tif (!kv || typeof kv.defineLocale !== 'function') {\n\t\tthrow new Error('Knockout-Validation is required, please ensure it is loaded before this localization file');\n\t}\n    return kv.defineLocale('ar-JO', {\n        required: 'مطلوب.',\n        min: 'أدخل قيمة اكبر من {0}.',\n        max: 'أدخل قيمة اقل من {0}.',\n        minLength: 'أدخل  {0} احرف أو أكثر.',\n        maxLength: 'أدخل {0} أحرف أو أقل.',\n        pattern: 'قيمة غير صحيحة.',\n        step: 'يجب ان تضاف بمقدار {0}.',\n        email: 'صيغة البريد الالكتروني غير صحيحة.',\n        date: 'صيغة التاريخ غير صحيحة.',\n        dateISO: 'صيغة التاريخ غير صحيحة.',\n        number: 'يرجى إدخال رقم.',\n        digit: 'يرجى إدخال منزلة.',\n        phoneUS: 'صيغة رقم الهاتف غير صحيحة.',\n        equal: 'القيمة غير مساوية.',\n        notEqual: 'يرجى اختيار قيمة اخرى.',\n        unique: 'يرجى التحقق من عدم اختبار قيمة مشابهة.'\n    });\n}));\n","/home/travis/build/npmtest/node-npmtest-knockout.validation/node_modules/knockout.validation/localization/bg-BG.js":"/**\n * Localization file for Bulgarian - Bulgaria (bg-BG)\n */\n(function(factory) {\n\t// Module systems magic dance.\n\t/*global require,ko.validation,define,module*/\n\tif (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n\t\t// CommonJS or Node\n\t\tmodule.exports = factory(require('../'));\n\t} else if (typeof define === 'function' && define['amd']) {\n\t\t// AMD anonymous module with hard-coded dependency on 'knockout.validation'\n\t\tdefine(['knockout.validation'], factory);\n\t} else {\n\t\t// <script> tag: use the global `ko.validation` object\n\t\tfactory(ko.validation);\n\t}\n}(function(kv) {\n\tif (!kv || typeof kv.defineLocale !== 'function') {\n\t\tthrow new Error('Knockout-Validation is required, please ensure it is loaded before this localization file');\n\t}\n\treturn kv.defineLocale('bg-BG', {\n\t\trequired: 'Моля, въведете стойност.',\n\t\tmin: 'Моля, въведете стойност по-голяма или равна на {0}.',\n\t\tmax: 'Моля, въведете стойност по-малка или равна на {0}.',\n\t\tminLength: 'Моля, въведете поне {0} символа.',\n\t\tmaxLength: 'Моля, въведете по-малко от {0} символа.',\n\t\tpattern: 'Моля, проверете тази стойност.',\n\t\tstep: 'Стойността трябва да се увеличава с {0}.',\n\t\temail: 'Това не е валиден e-mail адрес.',\n\t\tdate: 'Моля, въведете валидна дата.',\n\t\tdateISO: 'Моля, въведете валидна дата.',\n\t\tnumber: 'Моля, въведете число.',\n\t\tdigit: 'Моля, въведете цифра.',\n\t\tphoneUS: 'Моля, въведете валиден телефонен номер.',\n\t\tequal: 'Стойностите трябва да са равни.',\n\t\tnotEqual: 'Моля, изберете различна стойност.',\n\t\tunique: 'Моля, убедете се, че стойността е уникална.'\n\t});\n}));\n","/home/travis/build/npmtest/node-npmtest-knockout.validation/node_modules/knockout.validation/localization/ca-ES.js":"/**\n * Localization file for Catalan - Catalan (ca-ES)\n */\n(function(factory) {\n\t// Module systems magic dance.\n\t/*global require,ko.validation,define,module*/\n\tif (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n\t\t// CommonJS or Node\n        module.exports = factory(require('../'));\n\t} else if (typeof define === 'function' && define['amd']) {\n\t\t// AMD anonymous module with hard-coded dependency on 'knockout.validation'\n\t\tdefine(['knockout.validation'], factory);\n\t} else {\n\t\t// <script> tag: use the global `ko.validation` object\n\t\tfactory(ko.validation);\n\t}\n}(function(kv) {\n\tif (!kv || typeof kv.defineLocale !== 'function') {\n\t\tthrow new Error('Knockout-Validation is required, please ensure it is loaded before this localization file');\n\t}\n\treturn kv.defineLocale('ca-ES', {\n\t\trequired: 'Aquest camp es obligatori',\n\t\tmin: 'Introduir un valor igual o major que {0}',\n\t\tmax: 'Introduir un valor menor o igual que {0}',\n\t\tminLength: 'Ha de tenir un mínim de {0} caràcters',\n\t\tmaxLength: 'No pot tenir mes de {0} caràcters',\n\t\tpattern: 'Si us plau, comproveu aquest campo',\n\t\tstep: \"El valor ha d'incrementar-se en {0}\",\n\t\temail: 'Aquesta no es una adreça de correu electrònic correcta',\n\t\tdate: 'Introduir una data correcta',\n\t\tdateISO: 'Introduir una data correcta',\n\t\tnumber: 'Ha de ser un nombre',\n\t\tdigit: 'Introduir un dígit',\n\t\tphoneUS: 'Ha de ser un número de telèfon vàlid',\n\t\tequal: 'Els valors han de ser iguals',\n\t\tnotEqual: 'Elegiu un altre valor',\n\t\tunique: 'Ha de ser un valor únic'\n\t});\n}));\n","/home/travis/build/npmtest/node-npmtest-knockout.validation/node_modules/knockout.validation/localization/cs-CZ.js":"/**\n * Localization file for Czech - Czech Republic (cs-CZ)\n */\n(function(factory) {\n\t// Module systems magic dance.\n\t/*global require,ko.validation,define,module*/\n\tif (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n\t\t// CommonJS or Node\n        module.exports = factory(require('../'));\n\t} else if (typeof define === 'function' && define['amd']) {\n\t\t// AMD anonymous module with hard-coded dependency on 'knockout.validation'\n\t\tdefine(['knockout.validation'], factory);\n\t} else {\n\t\t// <script> tag: use the global `ko.validation` object\n\t\tfactory(ko.validation);\n\t}\n}(function(kv) {\n\tif (!kv || typeof kv.defineLocale !== 'function') {\n\t\tthrow new Error('Knockout-Validation is required, please ensure it is loaded before this localization file');\n\t}\n\treturn kv.defineLocale('cs-CZ', {\n\t\trequired: 'Toto pole je povinné.',\n\t\tmin: 'Zadejte číslo větší nebo rovné {0}.',\n\t\tmax: 'Zadejte číslo menší nebo rovné {0}.',\n\t\tminLength: 'Vložte alespoň {0} znaků.',\n\t\tmaxLength: 'Vložte nejvíce {0} znaků.',\n\t\tpattern: 'Zkontrolujte formát pole.',\n\t\tstep: 'Hodnota musí být násobek {0}.',\n\t\temail: 'Neplatná e-mailová adresa.',\n\t\tdate: 'Zadejte platné datum.',\n\t\tdateISO: 'Zadejte platné datum.',\n\t\tnumber: 'Zadejte číslo.',\n\t\tdigit: 'Zadejte číslice.',\n\t\tphoneUS: 'Zadejte platné telefonní číslo.',\n\t\tequal: 'Hodnoty musí být stejné.',\n\t\tnotEqual: 'Vyberte jinou hodnotu.',\n\t\tunique: 'Zkontrolujte, zda hodnota je jedinečná.'\n\t});\n}));\n","/home/travis/build/npmtest/node-npmtest-knockout.validation/node_modules/knockout.validation/localization/da-DK.js":"/**\n * Localization file for Danish - Denmark (da-DK)\n */\n(function(factory) {\n\t// Module systems magic dance.\n\t/*global require,ko.validation,define,module*/\n\tif (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n\t\t// CommonJS or Node\n        module.exports = factory(require('../'));\n\t} else if (typeof define === 'function' && define['amd']) {\n\t\t// AMD anonymous module\n\t\tdefine(['knockout.validation'], factory);\n\t} else {\n\t\t// <script> tag: use the global `ko.validation` object\n\t\tfactory(ko.validation);\n\t}\n}(function(kv) {\n\tif (!kv || typeof kv.defineLocale !== 'function') {\n\t\tthrow new Error('Knockout-Validation is required, please ensure it is loaded before this localization file');\n\t}\n\treturn kv.defineLocale('da-DK', {\n\t\trequired: 'Dette felt er påkrævet.',\n\t\tmin: 'Angiv en værdi der mindst er {0}.',\n\t\tmax: 'Angiv en værdi der højst er {0}.',\n\t\tminLength: 'Indtast mindst {0} tegn.',\n\t\tmaxLength: 'Indtast højst {0} tegn.',\n\t\tpattern: 'Tjek venligst denne værdi.',\n\t\tstep: 'Værdien skal stige med {0}',\n\t\temail: 'Dette er ikke en gyldig e-mail-adresse',\n\t\tdate: 'Indtast en gyldig dato',\n\t\tdateISO: 'Indtast en gyldig dato',\n\t\tnumber: 'Indtast et tal',\n\t\tdigit: 'Indtast et ciffer',\n\t\tphoneUS: 'Indtast et gyldigt telefonnummer',\n\t\tequal: 'Indtast den samme værdi igen.',\n\t\tnotEqual: 'Indtast en anden værdi.',\n\t\tunique: 'Sørg for at værdien er unik.'\n\t});\n}));\n","/home/travis/build/npmtest/node-npmtest-knockout.validation/node_modules/knockout.validation/localization/de-DE.js":"/**\n * Localization file for German - Germany (de-DE)\n */\n(function(factory) {\n\t// Module systems magic dance.\n\t/*global require,ko.validation,define,module*/\n\tif (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n\t\t// CommonJS or Node\n        module.exports = factory(require('../'));\n\t} else if (typeof define === 'function' && define['amd']) {\n\t\t// AMD anonymous module\n\t\tdefine(['knockout.validation'], factory);\n\t} else {\n\t\t// <script> tag: use the global `ko.validation` object\n\t\tfactory(ko.validation);\n\t}\n}(function(kv) {\n\tif (!kv || typeof kv.defineLocale !== 'function') {\n\t\tthrow new Error('Knockout-Validation is required, please ensure it is loaded before this localization file');\n\t}\n\treturn kv.defineLocale('de-DE', {\n\t\trequired: 'Dieses Feld ist erforderlich.',\n\t\tmin: 'Bitte geben Sie einen Wert größer oder gleich {0} ein.',\n\t\tmax: 'Bitte geben Sie einen Wert kleiner oder gleich {0} ein.',\n\t\tminLength: 'Bitte geben Sie mindestens {0} Zeichen ein.',\n\t\tmaxLength: 'Bitte geben Sie nicht mehr als {0} Zeichen ein.',\n\t\tpattern: 'Bitte überprüfen Sie diesen Wert.',\n\t\tstep: 'Der Wert muss um {0} erhöht werden.',\n\t\temail: 'Das ist keine gültige Email-Adresse.',\n\t\tdate: 'Bitte geben Sie ein gültiges Datum ein.',\n\t\tdateISO: 'Bitte geben Sie ein gültiges Datum ein.',\n\t\tnumber: 'Bitte geben Sie eine Zahl ein.',\n\t\tdigit: 'Bitte geben Sie eine Ziffer ein.',\n\t\tphoneUS: 'Bitte geben Sie eine gültige Telefonnummer ein.',\n\t\tequal: 'Die Werte müssen übereinstimmen.',\n\t\tnotEqual: 'Bitte wählen Sie einen anderen Wert.',\n\t\tunique: 'Bitte stellen Sie sicher, dass der Wert eindeutig ist.'\n\t});\n}));\n","/home/travis/build/npmtest/node-npmtest-knockout.validation/node_modules/knockout.validation/localization/el-GR.js":"/**\n * Localization file for Greek - Greece (el-GR)\n */\n(function(factory) {\n\t// Module systems magic dance.\n\t/*global require,ko.validation,define,module*/\n\tif (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n\t\t// CommonJS or Node\n        module.exports = factory(require('../'));\n\t} else if (typeof define === 'function' && define['amd']) {\n\t\t// AMD anonymous module\n\t\tdefine(['knockout.validation'], factory);\n\t} else {\n\t\t// <script> tag: use the global `ko.validation` object\n\t\tfactory(ko.validation);\n\t}\n}(function(kv) {\n\tif (!kv || typeof kv.defineLocale !== 'function') {\n\t\tthrow new Error('Knockout-Validation is required, please ensure it is loaded before this localization file');\n\t}\n\treturn kv.defineLocale('el-GR', {\n\t\trequired: 'Το πεδίο αυτό είναι υποχρεωτικό.',\n\t\tmin: 'Παρακαλώ εισάγετε μια τιμή μεγαλύτερη ή ίση από {0}.',\n\t\tmax: 'Παρακαλώ εισάγετε μια τιμή μικρότερη ή ίση από {0}.',\n\t\tminLength: 'Παρακαλώ εισάγετε τουλάχιστον {0} χαρακτήρες.',\n\t\tmaxLength: 'Παρακαλώ εισάγετε το πολύ {0} χαρακτήρες.',\n\t\tpattern: 'Παρακαλώ ελέγξτε την τιμή αυτή.',\n\t\tstep: 'Η τιμή πρέπει να αυξηθεί κατά {0}',\n\t\temail: 'Η διεύθυνση email δεν έχει έγκυρη μορφή',\n\t\tdate: 'Παρακαλώ εισάγετε μια έγκυρη ημερομηνία',\n\t\tdateISO: 'Παρακαλώ εισάγετε μια έγκυρη ημερομηνία',\n\t\tnumber: 'Παρακαλώ εισάγετε έναν αριθμό',\n\t\tdigit: 'Παρακαλώ εισάγετε ένα ψηφίο',\n\t\tphoneUS: 'Παρακαλώ εισάγετε έναν σωστό αριθμό τηλεφώνου',\n\t\tequal: 'Οι τιμές πρέπει να είναι ίσες',\n\t\tnotEqual: 'Παρακαλώ επιλέξτε μια άλλη τιμή.',\n\t\tunique: 'Παρακαλώ βεβαιωθείτε ότι η τιμή είναι μοναδική.'\n\t});\n}));\n","/home/travis/build/npmtest/node-npmtest-knockout.validation/node_modules/knockout.validation/localization/en-US.js":"/************************************************\n* This is an example localization page. All of these\n* messages are the default messages for ko.validation\n*\n* Currently ko.validation does multiple parameter replacement\n* on your message (indicated by the {0}, {1}, etc.).\n*\n* The parameters that you provide in your validation extender\n* are what are passed to your message to do the {0}, {1} etc. replacements.\n*\n* eg: myProperty.extend({ minLength: 5 });\n* ... will provide a message of \"Please enter at least 5 characters\"\n* when validated\n*\n* eg: myProperty.extend({ between: [1, 5] });\n* ... will provide a message of \"Please enter between 1 and 5 characters\"\n* when validated\n*\n* This message replacement obviously only works with primitives\n* such as numbers and strings. We do not stringify complex objects\n* or anything like that currently.\n*/\n(function(factory) {\n\t// Module systems magic dance.\n\t/*global require,ko.validation,define,module*/\n\tif (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n\t\t// CommonJS or Node\n        module.exports = factory(require('../'));\n\t} else if (typeof define === 'function' && define['amd']) {\n\t\t// AMD anonymous module\n\t\tdefine(['knockout.validation'], factory);\n\t} else {\n\t\t// <script> tag: use the global `ko.validation` object\n\t\tfactory(ko.validation);\n\t}\n}(function(kv) {\n\tif (!kv || typeof kv.defineLocale !== 'function') {\n\t\tthrow new Error('Knockout-Validation is required, please ensure it is loaded before this localization file');\n\t}\n\treturn kv.defineLocale('en-US', {\n\t\trequired: 'This field is required.',\n\t\tmin: 'Please enter a value greater than or equal to {0}.',\n\t\tmax: 'Please enter a value less than or equal to {0}.',\n\t\tminLength: 'Please enter at least {0} characters.',\n\t\tmaxLength: 'Please enter no more than {0} characters.',\n\t\tpattern: 'Please check this value.',\n\t\tstep: 'The value must increment by {0}.',\n\t\temail: 'Please enter a proper email address.',\n\t\tdate: 'Please enter a proper date.',\n\t\tdateISO: 'Please enter a proper date.',\n\t\tnumber: 'Please enter a number.',\n\t\tdigit: 'Please enter a digit.',\n\t\tphoneUS: 'Please specify a valid phone number.',\n\t\tequal: 'Values must equal.',\n\t\tnotEqual: 'Please choose another value.',\n\t\tunique: 'Please make sure the value is unique.'\n\t});\n}));\n","/home/travis/build/npmtest/node-npmtest-knockout.validation/node_modules/knockout.validation/localization/es-ES.js":"/**\n * Localization file for Spanish - Spain (es-ES)\n */\n(function(factory) {\n\t// Module systems magic dance.\n\t/*global require,ko.validation,define,module*/\n\tif (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n\t\t// CommonJS or Node\n        module.exports = factory(require('../'));\n\t} else if (typeof define === 'function' && define['amd']) {\n\t\t// AMD anonymous module\n\t\tdefine(['knockout.validation'], factory);\n\t} else {\n\t\t// <script> tag: use the global `ko.validation` object\n\t\tfactory(ko.validation);\n\t}\n}(function(kv) {\n\tif (!kv || typeof kv.defineLocale !== 'function') {\n\t\tthrow new Error('Knockout-Validation is required, please ensure it is loaded before this localization file');\n\t}\n\treturn kv.defineLocale('es-ES', {\n\t\trequired: 'Este campo es obligatorio',\n\t\tmin: 'Por favor, introduzca un valor igual o mayor a {0}',\n\t\tmax: 'Por favor, introduzca un valor menor o igual a {0}',\n\t\tminLength: 'Por favor, introduzca al menos {0} caracteres',\n\t\tmaxLength: 'Por favor, no introduzca más de {0} caracteres',\n\t\tpattern: 'Por favor, compruebe este campo',\n\t\tstep: 'El valor debe incrementarse por {0}',\n\t\temail: 'Este no es una dirección de email correcta',\n\t\tdate: 'Por favor, introduzca una fecha correcta',\n\t\tdateISO: 'Por favor, introduzca una fecha correcta',\n\t\tnumber: 'Por favor, introduzca un número',\n\t\tdigit: 'Por favor, introduzca un dígito',\n\t\tphoneUS: 'Por favor, introduzca un número de teléfono válido para EEUU',\n\t\tequal: 'Los valores deben ser iguales',\n\t\tnotEqual: 'Por favor, elija otro valor',\n\t\tunique: 'Por favor, asegurese de que el valor sea único'\n\t});\n}));\n","/home/travis/build/npmtest/node-npmtest-knockout.validation/node_modules/knockout.validation/localization/fa-IR.js":"/**\n * Localization file for Farsi - Iran (fa-IR)\n */\n(function(factory) {\n\t// Module systems magic dance.\n\t/*global require,ko.validation,define,module*/\n\tif (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n\t\t// CommonJS or Node\n        module.exports = factory(require('../'));\n\t} else if (typeof define === 'function' && define['amd']) {\n\t\t// AMD anonymous module\n\t\tdefine(['knockout.validation'], factory);\n\t} else {\n\t\t// <script> tag: use the global `ko.validation` object\n\t\tfactory(ko.validation);\n\t}\n}(function(kv) {\n\tif (!kv || typeof kv.defineLocale !== 'function') {\n\t\tthrow new Error('Knockout-Validation is required, please ensure it is loaded before this localization file');\n\t}\n\treturn kv.defineLocale('fa-IR', {\n\t\trequired: 'تکمیل این فیلد اجباری است.',\n\t\tmin: 'لطفاً مقداری بزرگتر یا برابر {0} وارد نمائید.',\n\t\tmax: 'لطفاً مقداری کوچکتر یا برابر {0} وارد نمائید.',\n\t\tminLength: 'لطفاً حداقل {0} حرف وارد نمائید.',\n\t\tmaxLength: 'لطفاً حداکثر {0} حرف وارد نمائید.',\n\t\tpattern: 'لطفاً یک مقدار معتبر وارد نمائید.',\n\t\tstep: 'مقدار باید با {0} افزایش پبدا کند.',\n\t\temail: 'لطفاً یک آدرس ایمیل معتبر وارد نمائید.',\n\t\tdate: 'لطفاً یک تاریخ معتبر وارد نمائید.',\n\t\tdateISO: 'لطفاً یک تاریخ معتبر وارد نمائید.',\n\t\tnumber: 'لطفاً یک عدد وارد نمائید.',\n\t\tdigit: 'لطفاً یک عدد وارد نمائید.',\n\t\tphoneUS: 'لطفاً یک شماره تماس معتبر وارد نمائید.',\n\t\tequal: 'مقدارها باید برابر باشند.',\n\t\tnotEqual: 'لطفاً یک مقدار دیگر وارد نمائید.',\n\t\tunique: 'لطفاً یک مقدار منحصربه فرد وارد نمائید.'\n\t});\n}));\n","/home/travis/build/npmtest/node-npmtest-knockout.validation/node_modules/knockout.validation/localization/fr-FR.js":"/**\n * Localization file for French - France (fr-FR)\n */\n(function(factory) {\n\t// Module systems magic dance.\n\t/*global require,ko.validation,define,module*/\n\tif (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n\t\t// CommonJS or Node\n        module.exports = factory(require('../'));\n\t} else if (typeof define === 'function' && define['amd']) {\n\t\t// AMD anonymous module\n\t\tdefine(['knockout.validation'], factory);\n\t} else {\n\t\t// <script> tag: use the global `ko.validation` object\n\t\tfactory(ko.validation);\n\t}\n}(function(kv) {\n\tif (!kv || typeof kv.defineLocale !== 'function') {\n\t\tthrow new Error('Knockout-Validation is required, please ensure it is loaded before this localization file');\n\t}\n\treturn kv.defineLocale('fr-FR', {\n\t\trequired: 'Ce champ est obligatoire.',\n\t\tmin: 'Veuillez saisir une valeur supérieure ou égale à {0}.',\n\t\tmax: 'Veuillez saisir une valeur inférieure ou égale à {0}.',\n\t\tminLength: 'Veuillez saisir au moins {0} caractères.',\n\t\tmaxLength: 'Veuillez saisir au plus {0} caractères.',\n\t\tpattern: 'Veuillez corriger ce champ.',\n\t\tstep: 'Le pas d\\'incrémentation de la valeur doit être de {0}.',\n\t\temail: 'Ceci n\\'est pas une adresse électronique valide.',\n\t\tdate: 'Veuillez saisir une date valide.',\n\t\tdateISO: 'Veuillez saisir une date (ISO) valide.',\n\t\tnumber: 'Veuillez saisir un nombre.',\n\t\tdigit: 'Veuillez saisir un chiffre.',\n\t\tphoneUS: 'Veuillez saisir un numéro de téléphone valide.',\n\t\tequal: 'Les valeurs doivent être égales.',\n\t\tnotEqual: 'Veuillez saisir une autre valeur.',\n\t\tunique: 'Veuillez vérifier que la valeur est unique.'\n\t});\n}));\n","/home/travis/build/npmtest/node-npmtest-knockout.validation/node_modules/knockout.validation/localization/he-IL.js":"/**\n * Localization file for Hebrew - Israel (he-IL)\n */\n(function(factory) {\n\t// Module systems magic dance.\n\t/*global require,ko.validation,define,module*/\n\tif (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n\t\t// CommonJS or Node\n        module.exports = factory(require('../'));\n\t} else if (typeof define === 'function' && define['amd']) {\n\t\t// AMD anonymous module\n\t\tdefine(['knockout.validation'], factory);\n\t} else {\n\t\t// <script> tag: use the global `ko.validation` object\n\t\tfactory(ko.validation);\n\t}\n}(function(kv) {\n\tif (!kv || typeof kv.defineLocale !== 'function') {\n\t\tthrow new Error('Knockout-Validation is required, please ensure it is loaded before this localization file');\n\t}\n\treturn kv.defineLocale('he-IL', {\n\t\trequired: 'שדה נדרש',\n\t\tmin: 'אנא הכנס ערך גדול יותר או שווה ל- {0}',\n\t\tmax: 'אנא הכנס ערך קטן יותר או שווה ל- {0}',\n\t\tminLength: 'אנא הכנס לפחות {0} תווים',\n\t\tmaxLength: 'אנא הכנס לא יותר מאשר {0} תווים',\n\t\tpattern: 'אנא בדוק את הערך הזה',\n\t\tstep: 'הערך צריך להשתנות ב - {0}',\n\t\temail: 'אנא הכנס כתובת דוא\"ל חוקית',\n\t\tdate: 'אנא הכנס תאריך תקין',\n\t\tdateISO: 'אנא הכנס תאריך תקין',\n\t\tnumber: 'אנא הכנס מספר',\n\t\tdigit: 'אנא הכנס ספרה',\n\t\tphoneUS: 'אנא הכנס מספר טלפון תקין',\n\t\tequal: 'ערכים חייבים להיות שווים',\n\t\tnotEqual: 'אנא בחר ערך שונה',\n\t\tunique: 'אנא וודא שהערך ייחודי'\n\t});\n}));\n","/home/travis/build/npmtest/node-npmtest-knockout.validation/node_modules/knockout.validation/localization/hr-HR.js":"/**\n * Localization file for Croatian - Croatia (hr-HR)\n */\n(function(factory) {\n\t// Module systems magic dance.\n\t/*global require,ko.validation,define,module*/\n\tif (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n\t\t// CommonJS or Node\n        module.exports = factory(require('../'));\n\t} else if (typeof define === 'function' && define['amd']) {\n\t\t// AMD anonymous module\n\t\tdefine(['knockout.validation'], factory);\n\t} else {\n\t\t// <script> tag: use the global `ko.validation` object\n\t\tfactory(ko.validation);\n\t}\n}(function(kv) {\n\tif (!kv || typeof kv.defineLocale !== 'function') {\n\t\tthrow new Error('Knockout-Validation is required, please ensure it is loaded before this localization file');\n\t}\n\treturn kv.defineLocale('hr-HR', {\n\t\trequired: 'Ovo polje je obavezno.',\n\t\tmin: 'Unesena vrijednost mora biti jednaka ili veća od {0}.',\n\t\tmax: 'Unesena vrijednost mora biti jednaka ili manja od {0}.',\n\t\tminLength: 'Minimalna dužina polja je {0} znakova.',\n\t\tmaxLength: 'Maksimalna dužina polja je {0} znakova.',\n\t\tpattern: 'Unesena vrijednost nije ispravnog formata.',\n\t\tstep: 'Vrijednost se mora povećavati za {0}.',\n\t\temail: 'Potrebno je unijeti ispravnu e-mail adresu.',\n\t\tdate: 'Potrebno je unijeti ispravan datum.',\n\t\tdateISO: 'Potrebno je unijeti ispravan datum.',\n\t\tnumber: 'Unesena vrijednost mora biti broj.',\n\t\tdigit: 'Unesena vrijednost mora biti znamenka.',\n\t\tphoneUS: 'Potrebno je unijeti ispravan broj telefona.',\n\t\tequal: 'Vrijednosti moraju biti jednake.',\n\t\tnotEqual: 'Unesite drugu vrijednost.',\n\t\tunique: 'Unesena vrijednost mora biti jedinstvena.'\n\t});\n}));\n","/home/travis/build/npmtest/node-npmtest-knockout.validation/node_modules/knockout.validation/localization/hu-HU.js":"/**\n * Localization file for Hungarian - Hungary (hu-HU)\n */\n(function(factory) {\n\t// Module systems magic dance.\n\t/*global require,ko.validation,define,module*/\n\tif (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n\t\t// CommonJS or Node\n        module.exports = factory(require('../'));\n\t} else if (typeof define === 'function' && define['amd']) {\n\t\t// AMD anonymous module\n\t\tdefine(['knockout.validation'], factory);\n\t} else {\n\t\t// <script> tag: use the global `ko.validation` object\n\t\tfactory(ko.validation);\n\t}\n}(function(kv) {\n\tif (!kv || typeof kv.defineLocale !== 'function') {\n\t\tthrow new Error('Knockout-Validation is required, please ensure it is loaded before this localization file');\n\t}\n\treturn kv.defineLocale('hu-HU', {\n\t\trequired: 'Kötelezõ megadni.',\n\t\tmin: 'Nem lehet kisebb, mint {0}.',\n\t\tmax: 'Nem lehet nagyobb, mint {0}.',\n\t\tminLength: 'Legalább {0} karaktert adjon meg.',\n\t\tmaxLength: 'Legfeljebb {0} karaktert adjon meg.',\n\t\tpattern: 'Kérem ellenõrizze ezt az értéket.',\n\t\tstep: 'Az értéknek {0} értékkel kell növekednie.',\n\t\temail: 'A megadott email cím nem érvényes.',\n\t\tdate: 'A megadott dátum nem érvényes.',\n\t\tdateISO: 'A megadott dátum nem érvényes.',\n\t\tnumber: 'Kérem számot adjon meg.',\n\t\tdigit: 'Kérem számjegyet adjon meg.',\n\t\tphoneUS: 'Kérem, hogy érvényes telefonszámot adjon meg.',\n\t\tequal: 'Az értékeknek meg kel egyezniük.',\n\t\tnotEqual: 'Az értékeknek különbözniük kell.',\n\t\tunique: 'Az értéknek egyedieknek kell lennie.'\n\t});\n}));\n","/home/travis/build/npmtest/node-npmtest-knockout.validation/node_modules/knockout.validation/localization/it-IT.js":"/**\n * Localization file for Italian - Italy (it-IT)\n */\n(function(factory) {\n\t// Module systems magic dance.\n\t/*global require,ko.validation,define,module*/\n\tif (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n\t\t// CommonJS or Node\n        module.exports = factory(require('../'));\n\t} else if (typeof define === 'function' && define['amd']) {\n\t\t// AMD anonymous module\n\t\tdefine(['knockout.validation'], factory);\n\t} else {\n\t\t// <script> tag: use the global `ko.validation` object\n\t\tfactory(ko.validation);\n\t}\n}(function(kv) {\n\tif (!kv || typeof kv.defineLocale !== 'function') {\n\t\tthrow new Error('Knockout-Validation is required, please ensure it is loaded before this localization file');\n\t}\n\treturn kv.defineLocale('it-IT', {\n\t\trequired: 'Il campo è obbligatorio.',\n\t\tmin: 'Inserire un valore superiore od uguale a {0}.',\n\t\tmax: 'Inserire un valore inferiore od uguale a {0}.',\n\t\tminLength: 'Inserire almeno {0} caratteri.',\n\t\tmaxLength: 'Inserire al massimo {0} caratteri.',\n\t\tpattern: 'Controllare il valore inserito.',\n\t\tstep: 'Il valore deve essere incrementato di {0}.',\n\t\temail: 'Indirizzo email non valido.',\n\t\tdate: 'Inserire una data valida.',\n\t\tdateISO: 'Inserire una data valida.',\n\t\tnumber: 'Inserire un valore numerico.',\n\t\tdigit: 'Inserire una cifra.',\n\t\tphoneUS: 'Specificare un numero di telefono valido.',\n\t\tequal: 'I valori devono essere uguali.',\n\t\tnotEqual: 'Il valore deve essere differente.',\n\t\tunique: 'Il valore deve essere univoco.'\n\t});\n}));\n","/home/travis/build/npmtest/node-npmtest-knockout.validation/node_modules/knockout.validation/localization/ja-JP.js":"/**\n * Localization file for Japanese - Japan (ja-JP)\n */\n(function(factory) {\n\t// Module systems magic dance.\n\t/*global require,ko.validation,define,module*/\n\tif (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n\t\t// CommonJS or Node\n        module.exports = factory(require('../'));\n\t} else if (typeof define === 'function' && define['amd']) {\n\t\t// AMD anonymous module\n\t\tdefine(['knockout.validation'], factory);\n\t} else {\n\t\t// <script> tag: use the global `ko.validation` object\n\t\tfactory(ko.validation);\n\t}\n}(function(kv) {\n\tif (!kv || typeof kv.defineLocale !== 'function') {\n\t\tthrow new Error('Knockout-Validation is required, please ensure it is loaded before this localization file');\n\t}\n\treturn kv.defineLocale('ja-JP', {\n\t\trequired: 'このフィールドは必須入力項目です。',\n\t\tmin: '{0}以上の値を入力してください。',\n\t\tmax: '{0}以下の値を入力してください。',\n\t\tminLength: '{0}文字以上の文字を入力してください。',\n\t\tmaxLength: '{0}文字以下の文字数にしてください。',\n\t\tpattern: '入力値を確認してください。',\n\t\tstep: 'この値は{0}で増加します。',\n\t\temail:'適切なe-mailアドレスではありません。',\n\t\tdate: '適切な日付を入力してください。',\n\t\tdateISO: '適切な日付を入力してください。',\n\t\tnumber: '数字を入力してください。',\n\t\tdigit: '数値を入力してください。',\n\t\tphoneUS: '有効な電話番号を指定してください。',\n\t\tequal: '同一の値にしてください。',\n\t\tnotEqual: '他の値を選択してください。',\n\t\tunique: '一意の値であることを確認してください。'\n\t});\n}));\n","/home/travis/build/npmtest/node-npmtest-knockout.validation/node_modules/knockout.validation/localization/ko-KR.js":"/**\n * Localization file for Korean - Korea (ko-KR)\n */\n(function(factory) {\n\t// Module systems magic dance.\n\t/*global require,ko.validation,define,module*/\n\tif (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n\t\t// CommonJS or Node\n        module.exports = factory(require('../'));\n\t} else if (typeof define === 'function' && define['amd']) {\n\t\t// AMD anonymous module\n\t\tdefine(['knockout.validation'], factory);\n\t} else {\n\t\t// <script> tag: use the global `ko.validation` object\n\t\tfactory(ko.validation);\n\t}\n}(function(kv) {\n\tif (!kv || typeof kv.defineLocale !== 'function') {\n\t\tthrow new Error('Knockout-Validation is required, please ensure it is loaded before this localization file');\n\t}\n\treturn kv.defineLocale('ko-KR', {\n\t\trequired: '필수 입력항목입니다.',\n\t\tmin: '{0}보다 큰 값을 입력해 주십시오.',\n\t\tmax: '{0}보다 작은 값을 입력해 주십시오.',\n\t\tminLength: '{0}글자 이상으로 입력해 주십시오.',\n\t\tmaxLength: '{0}글자 이하로 입력해 주십시오.',\n\t\tpattern: '입력한 값의 형식이 올바르지 않습니다.',\n\t\tstep: '이 값은 반드시 {0}씩 증가해야 합니다.',\n\t\temail:'올바른 이메일 주소 형식이 아닙니다.',\n\t\tdate: '올바른 날짜 형식이 아닙니다.',\n\t\tdateISO: '올바른 날짜 형식이 아닙니다.',\n\t\tnumber: '숫자를 입력해 주십시오.',\n\t\tdigit: '숫자를 입력해 주십시오.',\n\t\tphoneUS: '올바른 전화번호 형식이 아닙니다.',\n\t\tequal: '같은 값을 입력해 주십시오.',\n\t\tnotEqual: '다른 값을 선택해 주십시오.',\n\t\tunique: '고유한 값인지 확인해 주십시오.'\n\t});\n}));\n","/home/travis/build/npmtest/node-npmtest-knockout.validation/node_modules/knockout.validation/localization/lv-LV.js":"/**\n * Localization file for Latvian - Latvia (lv-LV)\n */\n(function(factory) {\n    // Module systems magic dance.\n    /*global require,ko.validation,define,module*/\n    if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n        // CommonJS or Node\n        module.exports = factory(require('../'));\n    } else if (typeof define === 'function' && define['amd']) {\n        // AMD anonymous module\n        define(['knockout.validation'], factory);\n    } else {\n        // <script> tag: use the global `ko.validation` object\n        factory(ko.validation);\n    }\n}(function(kv) {\n    if (!kv || typeof kv.defineLocale !== 'function') {\n        throw new Error('Knockout-Validation is required, please ensure it is loaded before this localization file');\n    }\n    return kv.defineLocale('lv-LV', {\n\t\trequired: 'Lauks ir obligāts.',\n\t\tmin: 'Lūdzu, ievadiet vērtību lielāku vai vienādu ar {0}.',\n\t\tmax: 'Lūdzu, ievadiet vērtību mazāku vai vienādu par {0}.',\n\t\tminLength: 'Lūdzu, ievadiet vismaz {0} simbolus.',\n\t\tmaxLength: 'Lūdzu, ievadiet ne vairāk kā {0} simbolus.',\n\t\tpattern: 'Lūdzu, pārbaudiet norādītās vērtības formātu.',\n\t\tstep: 'Norādītām vērtībām jābūt pieaugošām ar soli {0}',\n\t\temail: 'Norādītā e-pasta adrese neatbilst formātam',\n\t\tdate: 'Lūdzu, norādiet atbilstošu datuma formātu.',\n\t\tdateISO: 'Lūdzu, norādiet atbilstošu datuma formātu.',\n\t\tnumber: 'Lūdzu, ievadiet numuru.',\n\t\tdigit: 'Lūdzu, ievadiet ciparu.',\n\t\tphoneUS: 'Lūdzu, norādiet formātam atbilstošu telefona numuru.',\n\t\tequal: 'Norādītām vērtībām jābūt vienādām.',\n\t\tnotEqual: 'Norādītās vērtības nav vienādas.',\n\t\tunique: 'Vērtībai jābūt unikālai.'\n\t});\n}));\n","/home/travis/build/npmtest/node-npmtest-knockout.validation/node_modules/knockout.validation/localization/nb-NO.js":"/**\n * Localization file for Norwegian (Bokmål) - Norway (nb-NO)\n */\n(function(factory) {\n    // Module systems magic dance.\n    /*global require,ko.validation,define,module*/\n    if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n        // CommonJS or Node\n        module.exports = factory(require('../'));\n    } else if (typeof define === 'function' && define['amd']) {\n        // AMD anonymous module\n        define(['knockout.validation'], factory);\n    } else {\n        // <script> tag: use the global `ko.validation` object\n        factory(ko.validation);\n    }\n}(function(kv) {\n    if (!kv || typeof kv.defineLocale !== 'function') {\n        throw new Error('Knockout-Validation is required, please ensure it is loaded before this localization file');\n    }\n\treturn kv.defineLocale('nb-NO', {\n\t\trequired: 'Dette feltet er obligatorisk',\n\t\tmin: 'Fyll inn en verdi som er større eller lik {0}',\n\t\tmax: 'Fyll inn en verdi som er mindre eller lik {0}',\n\t\tminLength: 'Fyll inn minst {0} tegn',\n\t\tmaxLength: 'Fyll inn færre enn {0} tegn',\n\t\tpattern: 'Vennligst kontrollér verdien',\n\t\tstep: 'Verdien må økes med {0}',\n\t\temail: 'Dette er ikke en korrekt e-postadresse',\n\t\tdate: 'Fyll inn en korrekt dato',\n\t\tdateISO: 'Fyll inn en korrekt dato',\n\t\tnumber: 'Fyll inn ett nummer',\n\t\tdigit: 'Fyll inn ett siffer',\n\t\tphoneUS: 'Vennlist spesifiser ett korrekt telefonnummer',\n\t\tequal: 'Verdiene må være like',\n\t\tnotEqual: 'Vennligst velg en annen verdi',\n\t\tunique: 'Vennligst sørg for at verdien er unik'\n\t});\n}));\n","/home/travis/build/npmtest/node-npmtest-knockout.validation/node_modules/knockout.validation/localization/nl-BE.js":"/**\n * Localization file for Dutch - Belgium (nl-BE)\n */\n(function(factory) {\n    // Module systems magic dance.\n    /*global require,ko.validation,define,module*/\n    if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n        // CommonJS or Node\n        module.exports = factory(require('../'));\n    } else if (typeof define === 'function' && define['amd']) {\n        // AMD anonymous module\n        define(['knockout.validation'], factory);\n    } else {\n        // <script> tag: use the global `ko.validation` object\n        factory(ko.validation);\n    }\n}(function(kv) {\n    if (!kv || typeof kv.defineLocale !== 'function') {\n        throw new Error('Knockout-Validation is required, please ensure it is loaded before this localization file');\n    }\n\treturn kv.defineLocale('nl-BE', {\n\t\trequired: 'Dit veld is verplicht.',\n\t\tmin: 'Vul een waarde in groter dan of gelijk aan {0}.',\n\t\tmax: 'Vul een waarde in kleiner dan of gelijk aan {0}.',\n\t\tminLength: 'Vul ten minste {0} tekens in.',\n\t\tmaxLength: 'Vul ten hoogste {0} tekens in.',\n\t\tpattern: 'Vul een correcte waarde in.',\n\t\tstep: 'Vul een waarde in die deelbaar is door {0}.',\n\t\temail: 'Vul een correct e-mailadres in.',\n\t\tdate: 'Vul een correcte datum in.',\n\t\tdateISO: 'Vul een correcte datum in.',\n\t\tnumber: 'Vul een getal in.',\n\t\tdigit: 'Vul een cijfer in.',\n\t\tphoneUS: 'Vul een geldig telefoonnummer in.',\n\t\tequal: 'Waarden moeten gelijk zijn.',\n\t\tnotEqual: 'Vul een andere waarde in.',\n\t\tunique: 'Vul een unieke waarde in.'\n\t});\n}));\n","/home/travis/build/npmtest/node-npmtest-knockout.validation/node_modules/knockout.validation/localization/nl-NL.js":"/**\n * Localization file for Dutch - The Netherlands (nl-NL)\n */\n(function(factory) {\n    // Module systems magic dance.\n    /*global require,ko.validation,define,module*/\n    if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n        // CommonJS or Node\n        module.exports = factory(require('../'));\n    } else if (typeof define === 'function' && define['amd']) {\n        // AMD anonymous module\n        define(['knockout.validation'], factory);\n    } else {\n        // <script> tag: use the global `ko.validation` object\n        factory(ko.validation);\n    }\n}(function(kv) {\n    if (!kv || typeof kv.defineLocale !== 'function') {\n        throw new Error('Knockout-Validation is required, please ensure it is loaded before this localization file');\n    }\n\treturn kv.defineLocale('nl-NL', {\n\t\trequired: 'Dit veld is verplicht.',\n\t\tmin: 'Vul een waarde in groter of gelijk aan {0}.',\n\t\tmax: 'Vul een waarde in kleiner of gelijk aan {0}.',\n\t\tminLength: 'Vul ten minste {0} tekens in.',\n\t\tmaxLength: 'Vul ten hoogste {0} tekens in.',\n\t\tpattern: 'Vul een correcte waarde in.',\n\t\tstep: 'Vul een waarde in die deelbaar is door {0}.',\n\t\temail: 'Vul een correct e-mailadres in.',\n\t\tdate: 'Vul een correcte datum in.',\n\t\tdateISO: 'Vul een correcte datum in.',\n\t\tnumber: 'Vul een getal in.',\n\t\tdigit: 'Vul een cijfer in.',\n\t\tphoneUS: 'Vul een geldig telefoonnummer in.',\n\t\tequal: 'Waarden moeten gelijk zijn.',\n\t\tnotEqual: 'Vul een andere waarde in.',\n\t\tunique: 'Vul een unieke waarde in.'\n\t});\n}));\n","/home/travis/build/npmtest/node-npmtest-knockout.validation/node_modules/knockout.validation/localization/pl-PL.js":"/**\n * Localization file for Polish - Poland (pl-PL)\n */\n(function(factory) {\n    // Module systems magic dance.\n    /*global require,ko.validation,define,module*/\n    if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n        // CommonJS or Node\n        module.exports = factory(require('../'));\n    } else if (typeof define === 'function' && define['amd']) {\n        // AMD anonymous module\n        define(['knockout.validation'], factory);\n    } else {\n        // <script> tag: use the global `ko.validation` object\n        factory(ko.validation);\n    }\n}(function(kv) {\n    if (!kv || typeof kv.defineLocale !== 'function') {\n        throw new Error('Knockout-Validation is required, please ensure it is loaded before this localization file');\n    }\n\treturn kv.defineLocale('pl-PL', {\n\t\trequired: 'To pole jest wymagane.',\n\t\tmin: 'Wprowadź liczbę więszką lub równą {0}.',\n\t\tmax: 'Wprowadź liczbę mniejszą lub równą {0}.',\n\t\tminLength: 'Wprowadź co najmniej {0} znaków.',\n\t\tmaxLength: 'Wprowadź co najwyżej {0} znaków.',\n\t\tpattern: 'Sprawdź to pole.',\n\t\tstep: 'Wartość musi być wielokrotnością {0}.',\n\t\temail: 'Wprowadź poprawny adres e-mail.',\n\t\tdate: 'Wprowadź poprawną datę.',\n\t\tdateISO: 'Wprowadź poprawną datę.',\n\t\tnumber: 'Wprowadź liczbę.',\n\t\tdigit: 'Wprowadź cyfrę.',\n\t\tphoneUS: 'Wprowadź poprawny numer telefonu.',\n\t\tequal: 'Wartości muszą być równe.',\n\t\tnotEqual: 'Wybierz inną wartość.',\n\t\tunique: 'Sprawdź czy wartość jest unikalna.'\n\t});\n}));\n","/home/travis/build/npmtest/node-npmtest-knockout.validation/node_modules/knockout.validation/localization/pt-BR.js":"/**\n * Localization file for Portuguese - Brazil (pt-BR)\n */\n(function(factory) {\n    // Module systems magic dance.\n    /*global require,ko.validation,define,module*/\n    if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n        // CommonJS or Node\n        module.exports = factory(require('../'));\n    } else if (typeof define === 'function' && define['amd']) {\n        // AMD anonymous module\n        define(['knockout.validation'], factory);\n    } else {\n        // <script> tag: use the global `ko.validation` object\n        factory(ko.validation);\n    }\n}(function(kv) {\n    if (!kv || typeof kv.defineLocale !== 'function') {\n        throw new Error('Knockout-Validation is required, please ensure it is loaded before this localization file');\n    }\n\treturn kv.defineLocale('pt-BR', {\n\t\trequired: 'Este campo é obrigatório.',\n\t\tmin: 'Por favor, informe um valor maior ou igual a {0}.',\n\t\tmax: 'Por favor, informe um valor menor ou igual a {0}.',\n\t\tminLength: 'Por favor, informe ao menos {0} caracteres.',\n\t\tmaxLength: 'Por favor, informe no máximo {0} caracteres.',\n\t\tpattern: 'Por favor, verifique este valor',\n\t\tstep: 'O valor deve ser incrementado por {0}',\n\t\temail: 'Por favor, informe um e-mail válido.',\n\t\tdate: 'Por favor, informe uma data válida.',\n\t\tdateISO: 'Por favor, informe uma data válida (ISO).',\n\t\tnumber: 'Por favor, informe um número válido.',\n\t\tdigit: 'Por favor, utilize somente dígitos.',\n\t\tphoneUS: 'Por favor, informe um telefone válido',\n\t\tequal: 'Os valores devem ser iguais',\n\t\tnotEqual: 'Por favor, informe outro valor',\n\t\tunique: 'Verifique se o valor é único'\n\t});\n}));\n","/home/travis/build/npmtest/node-npmtest-knockout.validation/node_modules/knockout.validation/localization/pt-PT.js":"/**\n * Localization file for Portuguese - Portugal (pt-PT)\n */\n(function(factory) {\n    // Module systems magic dance.\n    /*global require,ko.validation,define,module*/\n    if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n        // CommonJS or Node\n        module.exports = factory(require('../'));\n    } else if (typeof define === 'function' && define['amd']) {\n        // AMD anonymous module\n        define(['knockout.validation'], factory);\n    } else {\n        // <script> tag: use the global `ko.validation` object\n        factory(ko.validation);\n    }\n}(function(kv) {\n    if (!kv || typeof kv.defineLocale !== 'function') {\n        throw new Error('Knockout-Validation is required, please ensure it is loaded before this localization file');\n    }\n\treturn kv.defineLocale('pt-PT', {\n\t\trequired: 'Este campo é obrigatório.',\n\t\tmin: 'Por favor, introduza um valor maior ou igual a {0}.',\n\t\tmax: 'Por favor, introduza um valor menor ou igual a {0}.',\n\t\tminLength: 'Por favor, introduza pelo menos {0} caracteres.',\n\t\tmaxLength: 'Por favor, introduza no máximo {0} caracteres.',\n\t\tpattern: 'Por favor, verifique este valor',\n\t\tstep: 'O valor deve ser incrementado por {0}',\n\t\temail: 'Por favor, introduza um e-mail válido.',\n\t\tdate: 'Por favor, introduza uma data válida.',\n\t\tdateISO: 'Por favor, introduza uma data válida (ISO).',\n\t\tnumber: 'Por favor, introduza um número válido.',\n\t\tdigit: 'Por favor, utilize somente dígitos.',\n\t\tphoneUS: 'Por favor, introduza um telefone válido',\n\t\tequal: 'Os valores devem ser iguais',\n\t\tnotEqual: 'Por favor, introduza outro valor',\n\t\tunique: 'Verifique se o valor é único'\n\t});\n}));\n","/home/travis/build/npmtest/node-npmtest-knockout.validation/node_modules/knockout.validation/localization/ro-RO.js":"/**\n * Localization file for Romanian - Romania (ro-RO)\n */\n(function(factory) {\n\t// Module systems magic dance.\n\t/*global require,ko.validation,define,module*/\n\tif (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n\t\t// CommonJS or Node\n        module.exports = factory(require('../'));\n\t} else if (typeof define === 'function' && define['amd']) {\n\t\t// AMD anonymous module\n\t\tdefine(['knockout.validation'], factory);\n\t} else {\n\t\t// <script> tag: use the global `ko.validation` object\n\t\tfactory(ko.validation);\n\t}\n}(function(kv) {\n\tif (!kv || typeof kv.defineLocale !== 'function') {\n\t\tthrow new Error('Knockout-Validation is required, please ensure it is loaded before this localization file');\n\t}\n\treturn kv.defineLocale('ro-RO', {\n\t\trequired: 'Acest câmp este obligatoriu.',\n\t\tmin: 'Introduceţi un număr mai mare sau egal cu {0}.',\n\t\tmax: 'Introduceţi un număr mai mic sau egal cu {0}.',\n\t\tminLength: 'Introduceţi cel puţin {0} caractere.',\n\t\tmaxLength: 'Introduceţi maxim {0} caractere.',\n\t\tpattern: 'Verificaţi această valoare.',\n\t\tstep: 'Valoarea trebuie să crească cu {0}.',\n\t\temail: 'Adresa de email nu este validă.',\n\t\tdate: 'Vă rugăm introduceţi o dată validă.',\n\t\tdateISO: 'Vă rugăm introduceţi o dată validă.',\n\t\tnumber: 'Introduceţi un număr.',\n\t\tdigit: 'Introduceţi o cifră.',\n\t\tphoneUS: 'Vă rugăm să specificați un număr de telefon valid.',\n\t\tequal: 'Valorile trebuie să fie egale.',\n\t\tnotEqual: 'Vă rugăm să alegeți o altă valoare.',\n\t\tunique: 'Vă rugăm să vă asigurați că valoarea este unică.'\n\t});\n}));\n","/home/travis/build/npmtest/node-npmtest-knockout.validation/node_modules/knockout.validation/localization/ru-RU.js":"/**\n * Localization file for Russian - Russia (ru-RU)\n */\n(function(factory) {\n\t// Module systems magic dance.\n\t/*global require,ko.validation,define,module*/\n\tif (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n\t\t// CommonJS or Node\n        module.exports = factory(require('../'));\n\t} else if (typeof define === 'function' && define['amd']) {\n\t\t// AMD anonymous module\n\t\tdefine(['knockout.validation'], factory);\n\t} else {\n\t\t// <script> tag: use the global `ko.validation` object\n\t\tfactory(ko.validation);\n\t}\n}(function(kv) {\n\tif (!kv || typeof kv.defineLocale !== 'function') {\n\t\tthrow new Error('Knockout-Validation is required, please ensure it is loaded before this localization file');\n\t}\n\treturn kv.defineLocale('ru-RU', {\n\t\trequired: 'Пожалуйста, заполните это поле.',\n\t\tmin: 'Пожалуйста, введите число большее или равное {0}.',\n\t\tmax: 'Пожалуйста, введите число меньшее или равное {0}.',\n\t\tminLength: 'Пожалуйста, введите по крайней мере {0} символов.',\n\t\tmaxLength: 'Пожалуйста, введите не больше чем {0} символов.',\n\t\tpattern: 'Пожалуйста, проверьте это поле.',\n\t\tstep: 'Значение должно быть кратным {0}',\n\t\temail: 'Пожалуйста, укажите здесь правильный адрес электронной почты',\n\t\tdate: 'Пожалуйста, введите правильную дату',\n\t\tdateISO: 'Пожалуйста, введите правильную дату в формате ISO',\n\t\tnumber: 'Пожалуйста, введите число',\n\t\tdigit: 'Пожалуйста, введите цифры',\n\t\tphoneUS: 'Пожалуйста, укажите правильный телефонный номер',\n\t\tequal: 'Значения должны быть равны',\n\t\tnotEqual: 'Пожалуйста, выберите другое значение.',\n\t\tunique: 'Пожалуйста, укажите уникальное значение.'\n\t});\n}));\n","/home/travis/build/npmtest/node-npmtest-knockout.validation/node_modules/knockout.validation/localization/sv-SE.js":"/**\n * Localization file for Swedish - Sweden (sv-SE)\n */\n(function(factory) {\n\t// Module systems magic dance.\n\t/*global require,ko.validation,define,module*/\n\tif (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n\t\t// CommonJS or Node\n        module.exports = factory(require('../'));\n\t} else if (typeof define === 'function' && define['amd']) {\n\t\t// AMD anonymous module\n\t\tdefine(['knockout.validation'], factory);\n\t} else {\n\t\t// <script> tag: use the global `ko.validation` object\n\t\tfactory(ko.validation);\n\t}\n}(function(kv) {\n\tif (!kv || typeof kv.defineLocale !== 'function') {\n\t\tthrow new Error('Knockout-Validation is required, please ensure it is loaded before this localization file');\n\t}\n\treturn kv.defineLocale('sv-SE', {\n\t\trequired: 'Detta fält är obligatoriskt',\n\t\tmin: 'Fyll i ett värde som är större än eller lika med {0}',\n\t\tmax: 'Fyll i ett värde som är mindre än eller lika med {0}',\n\t\tminLength: 'Fyll i minst {0} tecken',\n\t\tmaxLength: 'Fyll i färre än {0} tecken',\n\t\tpattern: 'Var god kontrollera värdet',\n\t\tstep: 'Värdet måste ökas med {0}',\n\t\temail: 'Fyll i en korrekt e-postadress',\n\t\tdate: 'Fyll i ett korrekt datum',\n\t\tdateISO: 'Fyll i ett korrekt datum',\n\t\tnumber: 'Fyll i ett nummer',\n\t\tdigit: 'Fyll i en siffra',\n\t\tphoneUS: 'Fyll i ett korrekt telefonnummer',\n\t\tequal: 'Fyll i samma värde en gång till',\n\t\tnotEqual: 'Fyll i ett annat värde',\n\t\tunique: 'Fyll i ett unikt värde'\n\t});\n}));\n","/home/travis/build/npmtest/node-npmtest-knockout.validation/node_modules/knockout.validation/localization/tr-TR.js":"/**\n * Localization file for Turkish - Turkey (tr-TR)\n */\n(function(factory) {\n\t// Module systems magic dance.\n\t/*global require,ko.validation,define,module*/\n\tif (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n\t\t// CommonJS or Node\n        module.exports = factory(require('../'));\n\t} else if (typeof define === 'function' && define['amd']) {\n\t\t// AMD anonymous module\n\t\tdefine(['knockout.validation'], factory);\n\t} else {\n\t\t// <script> tag: use the global `ko.validation` object\n\t\tfactory(ko.validation);\n\t}\n}(function(kv) {\n\tif (!kv || typeof kv.defineLocale !== 'function') {\n\t\tthrow new Error('Knockout-Validation is required, please ensure it is loaded before this localization file');\n\t}\n\treturn kv.defineLocale('tr-TR', {\n\t\trequired: 'Bu alanın doldurulması zorunludur.',\n\t\tmin: 'Lütfen {0} veya daha yüksek değer giriniz.',\n\t\tmax: 'Lütfen {0} veya daha düşük değer giriniz.',\n\t\tminLength: 'Lütfen en az {0} karakter giriniz.',\n\t\tmaxLength: 'Lütfen en fazla {0} karakter giriniz.',\n\t\tpattern: 'Lütfen bu alanı kontrol ediniz.',\n\t\tstep: 'Değer {0} arttırılmalı.',\n\t\temail: 'Bu geçerli bir E-Mail adresi değil.',\n\t\tdate: 'Lütfen geçerli bir tarih giriniz.',\n\t\tdateISO: 'Lütfen geçerli bir tarih giriniz.',\n\t\tnumber: 'Lütfen bir sayı değeri giriniz.',\n\t\tdigit: 'Lütfen bir rakam değeri giriniz.',\n\t\tphoneUS: 'Lütfen geçerli bir telefon numarası giriniz.',\n\t\tequal: 'Değerler eşit olmalıdır.',\n\t\tnotEqual: 'Lütfen farklı bir değer seçiniz.',\n\t\tunique: 'Lütfen değerin farklı olduğunu kontrol ediniz.'\n\t});\n}));\n","/home/travis/build/npmtest/node-npmtest-knockout.validation/node_modules/knockout.validation/localization/zh-CN.js":"/**\n * Localization file for Chinese - China (zh-CN)\n */\n(function(factory) {\n\t// Module systems magic dance.\n\t/*global require,ko.validation,define,module*/\n\tif (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n\t\t// CommonJS or Node\n        module.exports = factory(require('../'));\n\t} else if (typeof define === 'function' && define['amd']) {\n\t\t// AMD anonymous module\n\t\tdefine(['knockout.validation'], factory);\n\t} else {\n\t\t// <script> tag: use the global `ko.validation` object\n\t\tfactory(ko.validation);\n\t}\n}(function(kv) {\n\tif (!kv || typeof kv.defineLocale !== 'function') {\n\t\tthrow new Error('Knockout-Validation is required, please ensure it is loaded before this localization file');\n\t}\n\treturn kv.defineLocale('zh-CN', {\n\t\trequired: '必填字段',\n\t\tmin: '输入值必须大于等于 {0}',\n\t\tmax: '输入值必须小于等于 {0}',\n\t\tminLength: '至少输入 {0} 个字符',\n\t\tmaxLength: '输入的字符数不能超过 {0} 个',\n\t\tpattern: '请检查此值',\n\t\tstep: '每次步进值是 {0}',\n\t\temail: 'email地址格式不正确',\n\t\tdate: '日期格式不正确',\n\t\tdateISO: '日期格式不正确',\n\t\tnumber: '请输入一个数字',\n\t\tdigit: '请输入一个数字',\n\t\tphoneUS: '请输入一个合法的手机号(US)',\n\t\tequal: '输入值不一样',\n\t\tnotEqual: '请选择另一个值',\n\t\tunique: '此值应该是唯一的'\n\t});\n}));\n","/home/travis/build/npmtest/node-npmtest-knockout.validation/node_modules/knockout.validation/localization/zh-TW.js":"/**\n * Localization file for Chinese - Taiwan (zh-TW)\n */\n(function(factory) {\n\t// Module systems magic dance.\n\t/*global require,ko.validation,define,module*/\n\tif (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n\t\t// CommonJS or Node\n        module.exports = factory(require('../'));\n\t} else if (typeof define === 'function' && define['amd']) {\n\t\t// AMD anonymous module\n\t\tdefine(['knockout.validation'], factory);\n\t} else {\n\t\t// <script> tag: use the global `ko.validation` object\n\t\tfactory(ko.validation);\n\t}\n}(function(kv) {\n\tif (!kv || typeof kv.defineLocale !== 'function') {\n\t\tthrow new Error('Knockout-Validation is required, please ensure it is loaded before this localization file');\n\t}\n\treturn kv.defineLocale('zh-TW', {\n\t\trequired: '此欄位為必填欄位',\n\t\tmin: '輸入值必須大於等於 {0}',\n\t\tmax: '輸入值必須小於等於 {0}',\n\t\tminLength: '請至少輸入 {0} 個字元',\n\t\tmaxLength: '最大長度為 {0} 個字元',\n\t\tpattern: '請檢查此值',\n\t\tstep: '每次遞增值是 {0}',\n\t\temail: 'email格式不正確',\n\t\tdate: '日期格式不正確',\n\t\tdateISO: '日期格式不正確',\n\t\tnumber: '請輸入一組數字',\n\t\tdigit: '請輸入一組數字',\n\t\tphoneUS: '請輸入一組有效的電話號碼(US)',\n\t\tequal: '兩次輸入值不相同',\n\t\tnotEqual: '請選擇其他數值',\n\t\tunique: '請確認此值為唯一值'\n\t});\n}));\n"}